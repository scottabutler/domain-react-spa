{"version":3,"sources":["components/numericSearchField/index.tsx","components/search/index.tsx","components/newTabLink/index.tsx","components/footer/index.tsx","components/agentDetails/index.tsx","components/agencyDetails/index.tsx","components/simpleCarousel/index.tsx","utils/localStorageHelper.ts","utils/dateTimeHelper.ts","components/inspectionTimes/index.tsx","components/addedTag/index.tsx","components/listingProgressBar/index.tsx","components/searchResult/index.tsx","data/stopsLatLon.js","utils/distance.js","utils/staticDataHelper.ts","App.tsx","index.tsx"],"names":["NumericSearchField","props","defaultValue","updateHandler","interval","icon","type","suffix","text","toLocaleString","className","onClick","Search","state","updateState","suburbs","updateSuburbs","minBeds","updateMinBeds","minBaths","updateMinBaths","minCarSpaces","updateMinCarSpaces","maxPrice","updateMaxPrice","maxDistanceFromTrain","updateMaxDistanceFromTrain","runSearch","id","map","x","labelClass","Fragment","key","name","value","checked","onChange","htmlFor","rows","placeholder","onBlur","disabled","NewTabLink","href","label","target","rel","Footer","AgentDetails","photoUrl","src","AgencyDetails","rgb","logoUrl","preferredColourHex","contacts","useState","open","setOpen","agentBackgroundColour","agentTextColour","hex","withoutHash","replaceAll","length","substr","parseInt","hexToRgb","style","backgroundColor","color","border","SimpleCarousel","urls","altText","index","setIndex","count","previousIndex","current","getPreviousIndex","nextIndex","getNextIndex","dots","i","imgStyle","backgroundImage","previousImage","display","nextImage","title","getArchivedDataFromLocalStorage","JSON","parse","localStorage","getItem","isArchivedInStorage","storageData","saveSearchParamsToLocalStorage","maxDistFromTrain","suburbCsv","window","setItem","stringify","getTwelveHourTime","dateTime","Date","hour","minute","hour12","getShortDateAndTime","startTime","getRelativeShortDate","getShortDate","startDate","day","date","Intl","DateTimeFormat","weekday","format","getShortDay","getDate","month","getShortMonth","getMonth","daysAsMinutes","days","lowercase","today","tomorrow","setDate","setHours","dayAfterTomorrow","getDateTimeString","getFullYear","ensureTwoDigits","getHours","getMinutes","getSeconds","number","toString","monthIndex","InspectionTimes","inspectionSchedule","auctionSchedule","inspectionTimesOpen","setInspectionTimesOpen","times","filter","openingTime","isAuctionTimeInFuture","time","startDateTime","endDateTime","startDateTimeString","endTime","getDateRange","closingTime","AddedTag","addedTagText","dateListed","firstDate","secondDate","now","listingDate","addedHoursAgo","Math","round","abs","getTime","addedDaysAgo","floor","isToday","getAddedTagText","addedTag","ListingProgressBar","auctionScheduleTime","dateListedDays","auctionDateDays","nowDays","progress","height","role","width","aria-valuenow","aria-valuemin","aria-valuemax","SearchResult","closestStops","data","showArchived","listing","listingSlug","isArchived","setIsArchived","streetAddress","propertyDetails","unitNumber","streetNumber","street","imageAltText","agent","advertiser","closestStopsMarkup","stop","y","stop_name","replace","distance","latitude","longitude","imageUrls","media","category","url","propertyType","description","toLowerCase","indexOf","RegExp","test","numericUnitNumber","parsePropertyType","summaryDescription","openTimes","openTime","undefined","auctionDate","priceDetails","displayPrice","suburb","postcode","bedrooms","bathrooms","carspaces","archive","storedData","saveInLocalStorage","stops","getDistanceFromLatLonInKm","lat1","lon1","lat2","lon2","dLat","deg2rad","dLon","a","sin","cos","atan2","sqrt","deg","PI","findClosestStops","lat","lon","nearbyStops","lonDiff","stop_longitude","latDiff","stop_latitude","push","sort","b","getInspectionSchedule","inspectionCount","randomInt","byAppointment","recurring","baseDate","openingDate","getRandomDateAndTime","closingDate","setMinutes","getAuctionSchedule","auctionLocation","minMinuteOffset","maxMinuteOffset","setRandomTime","getRandomDate","randomMinutes","min","max","random","getQueryVariable","variable","vars","location","search","substring","split","pair","App","suburbsFromQueryString","savedSearchParams","loadSearchParamsFromLocalStorage","React","selectedState","setSelectedState","defaultSuburbs","decodeURI","setSuburbs","setMinBeds","setMinBaths","setMinCarSpaces","setMaxPrice","setMaxDistanceFromTrain","Array","results","setResults","searchResultList","setSearchResultList","isLoading","setIsLoading","setShowArchived","requestedSuburbs","setRequestedSuburbs","suburbCountsString","setSuburbCountsString","resultsCount","setResultsCount","setStateFromChangeEvent","evt","setFunc","currentTarget","setResultsWithClosestStops","r","resultsWithClosestStops","apiKey","reqSuburbs","trim","join","suburbArray","s","axios","post","then","catch","err","console","error","get","updatedData","postProcessSampleData","rand","hasInspectionSchedule","hasAuctionSchedule","lastInspectionTime","getRandomInspectionAndAuctionSchedules","spinner","toTitleCase","input","w","toUpperCase","useEffect","list","suburbCounts","hiddenResultCount","upperCaseSuburb","orderedSuburbCounts","obj","sorted","Object","keys","result","k","sortedKey","orderObjectPropertiesByCount","counts","requestedSuburbsArray","find","val","defaultChecked","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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B,CACD,YAAe,eACf,UAAa,uBACb,eAAkB,SAClB,eAAkB,WACjB,CACD,YAAe,iBACf,UAAa,yBACb,eAAkB,QAClB,eAAkB,YACjB,CACD,YAAe,UACf,UAAa,kBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,aACf,UAAa,qBACb,eAAkB,SAClB,eAAkB,UACjB,CACD,YAAe,UACf,UAAa,kBACb,eAAkB,SAClB,eAAkB,UACjB,CACD,YAAe,SACf,UAAa,iBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,YACf,UAAa,oBACb,eAAkB,SAClB,eAAkB,YACjB,CACD,YAAe,mBACf,UAAa,uBACb,eAAkB,WAClB,eAAkB,UACjB,CACD,YAAe,gBACf,UAAa,wBACb,eAAkB,SAClB,eAAkB,UACjB,CACD,YAAe,WACf,UAAa,mBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,YACf,UAAa,oBACb,eAAkB,SAClB,eAAkB,YACjB,CACD,YAAe,WACf,UAAa,mBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,aACf,UAAa,sBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,WACf,UAAa,sBACb,eAAkB,SAClB,eAAkB,YACjB,CACD,YAAe,YACf,UAAa,oBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,aACf,UAAa,qBACb,eAAkB,SAClB,eAAkB,YACjB,CACD,YAAe,UACf,UAAa,kBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,cACf,UAAa,sBACb,eAAkB,QAClB,eAAkB,YACjB,CACD,YAAe,aACf,UAAa,mBACb,eAAkB,WAClB,eAAkB,UACjB,CACD,YAAe,aACf,UAAa,mBACb,eAAkB,WAClB,eAAkB,UACjB,CACD,YAAe,QACf,UAAa,gBACb,eAAkB,WAClB,eAAkB,UACjB,CACD,YAAe,WACf,UAAa,mBACb,eAAkB,SAClB,eAAkB,YACjB,CACD,YAAe,cACf,UAAa,sBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,UACf,UAAa,kBACb,eAAkB,SAClB,eAAkB,YACjB,CACD,YAAe,aACf,UAAa,qBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,aACf,UAAa,qBACb,eAAkB,SAClB,eAAkB,YACjB,CACD,YAAe,aACf,UAAa,qBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,aACf,UAAa,uBACb,eAAkB,QAClB,eAAkB,YACjB,CACD,YAAe,gBACf,UAAa,wBACb,eAAkB,QAClB,eAAkB,YACjB,CACD,YAAe,SACf,UAAa,iBACb,eAAkB,UAClB,eAAkB,YACjB,CACD,YAAe,gBACf,UAAa,wBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,aACf,UAAa,qBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,YACf,UAAa,oBACb,eAAkB,SAClB,eAAkB,YACjB,CACD,YAAe,gBACf,UAAa,iBACb,eAAkB,SAClB,eAAkB,WACjB,CACD,YAAe,SACf,UAAa,iBACb,eAAkB,SAClB,eAAkB,YACjB,CACD,YAAe,YACf,UAAa,mBACb,eAAkB,WAClB,eAAkB,UACjB,CACD,YAAe,YACf,UAAa,mBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,gBACf,UAAa,kBACb,eAAkB,SAClB,eAAkB,WACjB,CACD,YAAe,UACf,UAAa,mBACb,eAAkB,SAClB,eAAkB,YACjB,CACD,YAAe,UACf,UAAa,kBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,iBACf,UAAa,yBACb,eAAkB,SAClB,eAAkB,YACjB,CACD,YAAe,YACf,UAAa,oBACb,eAAkB,WAClB,eAAkB,WACjB,CACD,YAAe,SACf,UAAa,iBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,cACf,UAAa,sBACb,eAAkB,WAClB,eAAkB,UACjB,CACD,YAAe,WACf,UAAa,mBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,UACf,UAAa,kBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,WACf,UAAa,mBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,UACf,UAAa,kBACb,eAAkB,SAClB,eAAkB,YACjB,CACD,YAAe,iBACf,UAAa,sBACb,eAAkB,QAClB,eAAkB,YACjB,CACD,YAAe,YACf,UAAa,oBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,gBACf,UAAa,wBACb,eAAkB,SAClB,eAAkB,YACjB,CACD,YAAe,cACf,UAAa,sBACb,eAAkB,WAClB,eAAkB,WACjB,CACD,YAAe,WACf,UAAa,sBACb,eAAkB,SAClB,eAAkB,YACjB,CACD,YAAe,YACf,UAAa,oBACb,eAAkB,SAClB,eAAkB,YACjB,CACD,YAAe,SACf,UAAa,iBACb,eAAkB,SAClB,eAAkB,YACjB,CACD,YAAe,eACf,UAAa,uBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,eACf,UAAa,oBACb,eAAkB,WAClB,eAAkB,UACjB,CACD,YAAe,eACf,UAAa,uBACb,eAAkB,UAClB,eAAkB,YACjB,CACD,YAAe,eACf,UAAa,qBACb,eAAkB,QAClB,eAAkB,YACjB,CACD,YAAe,eACf,UAAa,kBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,WACf,UAAa,mBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,aACf,UAAa,qBACb,eAAkB,UAClB,eAAkB,YACjB,CACD,YAAe,WACf,UAAa,mBACb,eAAkB,WAClB,eAAkB,UACjB,CACD,YAAe,YACf,UAAa,oBACb,eAAkB,SAClB,eAAkB,YACjB,CACD,YAAe,aACf,UAAa,qBACb,eAAkB,SAClB,eAAkB,YACjB,CACD,YAAe,YACf,UAAa,kBACb,eAAkB,WAClB,eAAkB,UACjB,CACD,YAAe,YACf,UAAa,kBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,aACf,UAAa,qBACb,eAAkB,SAClB,eAAkB,YACjB,CACD,YAAe,WACf,UAAa,mBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,aACf,UAAa,mBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,aACf,UAAa,mBACb,eAAkB,WAClB,eAAkB,UACjB,CACD,YAAe,aACf,UAAa,qBACb,eAAkB,QAClB,eAAkB,YACjB,CACD,YAAe,eACf,UAAa,uBACb,eAAkB,SAClB,eAAkB,UACjB,CACD,YAAe,UACf,UAAa,kBACb,eAAkB,SAClB,eAAkB,YACjB,CACD,YAAe,aACf,UAAa,0BACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,cACf,UAAa,sBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,eACf,UAAa,uBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,UACf,UAAa,kBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,UACf,UAAa,kBACb,eAAkB,WAClB,eAAkB,WACjB,CACD,YAAe,eACf,UAAa,kBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,aACf,UAAa,qBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,aACf,UAAa,qBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,WACf,UAAa,mBACb,eAAkB,SAClB,eAAkB,YACjB,CACD,YAAe,YACf,UAAa,oBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,aACf,UAAa,qBACb,eAAkB,WAClB,eAAkB,WACjB,CACD,YAAe,YACf,UAAa,oBACb,eAAkB,WAClB,eAAkB,WACjB,CACD,YAAe,YACf,UAAa,mBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,aACf,UAAa,oBACb,eAAkB,SAClB,eAAkB,YACjB,CACD,YAAe,gBACf,UAAa,iBACb,eAAkB,QAClB,eAAkB,YACjB,CACD,YAAe,UACf,UAAa,kBACb,eAAkB,UAClB,eAAkB,YACjB,CACD,YAAe,iBACf,UAAa,oBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,cACf,UAAa,qBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,UACf,UAAa,kBACb,eAAkB,WAClB,eAAkB,WACjB,CACD,YAAe,UACf,UAAa,mBACb,eAAkB,SAClB,eAAkB,YACjB,CACD,YAAe,SACf,UAAa,iBACb,eAAkB,SAClB,eAAkB,YACjB,CACD,YAAe,UACf,UAAa,kBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,WACf,UAAa,mBACb,eAAkB,UAClB,eAAkB,UACjB,CACD,YAAe,YACf,UAAa,oBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,YACf,UAAa,oBACb,eAAkB,SAClB,eAAkB,YACjB,CACD,YAAe,WACf,UAAa,qBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,YACf,UAAa,oBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,UACf,UAAa,kBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,aACf,UAAa,qBACb,eAAkB,WAClB,eAAkB,WACjB,CACD,YAAe,SACf,UAAa,iBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,UACf,UAAa,kBACb,eAAkB,SAClB,eAAkB,UACjB,CACD,YAAe,WACf,UAAa,mBACb,eAAkB,WAClB,eAAkB,UACjB,CACD,YAAe,SACf,UAAa,oBACb,eAAkB,SAClB,eAAkB,YACjB,CACD,YAAe,WACf,UAAa,mBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,QACf,UAAa,gBACb,eAAkB,SAClB,eAAkB,UACjB,CACD,YAAe,YACf,UAAa,oBACb,eAAkB,WAClB,eAAkB,UACjB,CACD,YAAe,aACf,UAAa,qBACb,eAAkB,UAClB,eAAkB,YACjB,CACD,YAAe,WACf,UAAa,iBACb,eAAkB,SAClB,eAAkB,UACjB,CACD,YAAe,aACf,UAAa,oBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,YACf,UAAa,kBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,YACf,UAAa,iBACb,eAAkB,WAClB,eAAkB,WACjB,CACD,YAAe,UACf,UAAa,kBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,YACf,UAAa,oBACb,eAAkB,SAClB,eAAkB,YACjB,CACD,YAAe,cACf,UAAa,sBACb,eAAkB,SAClB,eAAkB,YACjB,CACD,YAAe,WACf,UAAa,qBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,YACf,UAAa,iBACb,eAAkB,QAClB,eAAkB,YACjB,CACD,YAAe,WACf,UAAa,yBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,cACf,UAAa,oBACb,eAAkB,UAClB,eAAkB,YACjB,CACD,YAAe,UACf,UAAa,kBACb,eAAkB,UAClB,eAAkB,YACjB,CACD,YAAe,cACf,UAAa,sBACb,eAAkB,SAClB,eAAkB,UACjB,CACD,YAAe,UACf,UAAa,kBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,UACf,UAAa,eACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,YACf,UAAa,oBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,YACf,UAAa,oBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,WACf,UAAa,wBACb,eAAkB,WAClB,eAAkB,WACjB,CACD,YAAe,YACf,UAAa,kBACb,eAAkB,QAClB,eAAkB,YACjB,CACD,YAAe,WACf,UAAa,0BACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,eACf,UAAa,uBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,YACf,UAAa,oBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,YACf,UAAa,oBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,aACf,UAAa,wBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,aACf,UAAa,sBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,YACf,UAAa,oBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,YACf,UAAa,gBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,WACf,UAAa,yBACb,eAAkB,WAClB,eAAkB,UACjB,CACD,YAAe,gBACf,UAAa,kBACb,eAAkB,SAClB,eAAkB,UACjB,CACD,YAAe,cACf,UAAa,sBACb,eAAkB,WAClB,eAAkB,WACjB,CACD,YAAe,UACf,UAAa,kBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,WACf,UAAa,wBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,WACf,UAAa,mBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,UACf,UAAa,kBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,WACf,UAAa,yBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,iBACf,UAAa,uBACb,eAAkB,SAClB,eAAkB,UACjB,CACD,YAAe,iBACf,UAAa,qBACb,eAAkB,WAClB,eAAkB,UACjB,CACD,YAAe,iBACf,UAAa,0BACb,eAAkB,SAClB,eAAkB,YACjB,CACD,YAAe,SACf,UAAa,iBACb,eAAkB,SAClB,eAAkB,YACjB,CACD,YAAe,eACf,UAAa,iBACb,eAAkB,WAClB,eAAkB,WACjB,CACD,YAAe,iBACf,UAAa,4BACb,eAAkB,WAClB,eAAkB,UACjB,CACD,YAAe,SACf,UAAa,mBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,eACf,UAAa,qBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,YACf,UAAa,iBACb,eAAkB,SAClB,eAAkB,UACjB,CACD,YAAe,UACf,UAAa,kBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,YACf,UAAa,oBACb,eAAkB,SAClB,eAAkB,UACjB,CACD,YAAe,UACf,UAAa,iBACb,eAAkB,UAClB,eAAkB,YACjB,CACD,YAAe,YACf,UAAa,iBACb,eAAkB,WAClB,eAAkB,WACjB,CACD,YAAe,iBACf,UAAa,oBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,iBACf,UAAa,yBACb,eAAkB,WAClB,eAAkB,WACjB,CACD,YAAe,YACf,UAAa,qBACb,eAAkB,WAClB,eAAkB,UACjB,CACD,YAAe,WACf,UAAa,kBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,cACf,UAAa,sBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,iBACf,UAAa,0BACb,eAAkB,SAClB,eAAkB,YACjB,CACD,YAAe,kBACf,UAAa,4BACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,kBACf,UAAa,mBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,gBACf,UAAa,wBACb,eAAkB,WAClB,eAAkB,WACjB,CACD,YAAe,aACf,UAAa,qBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,aACf,UAAa,oBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,cACf,UAAa,sBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,aACf,UAAa,qBACb,eAAkB,SAClB,eAAkB,YACjB,CACD,YAAe,WACf,UAAa,mBACb,eAAkB,OAClB,eAAkB,YACjB,CACD,YAAe,aACf,UAAa,2BACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,aACf,UAAa,qBACb,eAAkB,SAClB,eAAkB,YACjB,CACD,YAAe,WACf,UAAa,mBACb,eAAkB,SAClB,eAAkB,YACjB,CACD,YAAe,WACf,UAAa,qBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,eACf,UAAa,uBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,eACf,UAAa,uBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,UACf,UAAa,kBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,WACf,UAAa,mBACb,eAAkB,SAClB,eAAkB,UACjB,CACD,YAAe,UACf,UAAa,iBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,aACf,UAAa,gCACb,eAAkB,WAClB,eAAkB,UACjB,CACD,YAAe,eACf,UAAa,uBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,YACf,UAAa,oBACb,eAAkB,WAClB,eAAkB,UACjB,CACD,YAAe,SACf,UAAa,iBACb,eAAkB,WAClB,eAAkB,WACjB,CACD,YAAe,eACf,UAAa,6BACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,YACf,UAAa,2BACb,eAAkB,QAClB,eAAkB,YACjB,CACD,YAAe,aACf,UAAa,qBACb,eAAkB,SAClB,eAAkB,YACjB,CACD,YAAe,eACf,UAAa,6BACb,eAAkB,SAClB,eAAkB,YACjB,CACD,YAAe,YACf,UAAa,oBACb,eAAkB,WAClB,eAAkB,YACjB,CACD,YAAe,iBACf,UAAa,yBACb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","file":"static/js/main.66b0cdcc.chunk.js","sourcesContent":["import React from 'react';\r\nimport './numericSearchField.scss';\r\n\r\nfunction NumericSearchField(props: any) {\r\n    const { defaultValue, updateHandler, interval, icon, type, suffix } = props;\r\n\r\n    const decrement = function() {\r\n        if (defaultValue - interval >= 0) {\r\n            updateHandler(defaultValue - interval);\r\n        }\r\n    }\r\n\r\n    const increment = function() {\r\n        updateHandler(defaultValue + interval);\r\n    }\r\n\r\n    let text = defaultValue.toLocaleString();\r\n    switch (type) {\r\n        case \"min\":\r\n            text = `${text}+`;\r\n            break;\r\n        case \"max\":\r\n            text = `<${text}`;\r\n            break;\r\n    }\r\n\r\n    return (\r\n        <div className=\"col-sm-6 col-md-4 col-lg-3 col-xl-12 numeric-search-field mb-2 px-3\">\r\n            <div className=\"align-bottom controls mt-2 px-0\">\r\n                <button className=\"down bg-light text-dark p-1 border border-secondary rounded-left d-inline-block\" onClick={decrement}>-</button>\r\n                <span className=\"value px-2 py-1 border-top border-bottom border-secondary d-inline-block\"><i className={`${icon} float-left`} />{text}{suffix ?? ''}</span>\r\n                <button className=\"up bg-light text-dark p-1 border border-secondary rounded-right d-inline-block\" onClick={increment}>+</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NumericSearchField;","import React from 'react';\r\nimport NumericSearchField from '../numericSearchField';\r\nimport './search.scss';\r\n// import SuburbSearch from '../suburbSearch';\r\n\r\nfunction Search(props: any) {\r\n    const {\r\n        state, updateState,\r\n        suburbs, updateSuburbs,\r\n        minBeds, updateMinBeds,\r\n        minBaths, updateMinBaths,\r\n        minCarSpaces, updateMinCarSpaces,\r\n        maxPrice, updateMaxPrice,\r\n        maxDistanceFromTrain, updateMaxDistanceFromTrain,\r\n        runSearch\r\n    } = props;\r\n\r\n    return (\r\n        <div id=\"search\" className=\"p-2\">\r\n            {/* <span className=\"d-inline-block d-sm-none\">XS</span>\r\n            <span className=\"d-none d-sm-inline-block d-md-none\">SM</span>\r\n            <span className=\"d-none d-md-inline-block d-lg-none\">MD</span>\r\n            <span className=\"d-none d-lg-inline-block d-xl-none\">LG</span>\r\n            <span className=\"d-none d-xl-inline-block\">XL</span> */}\r\n\r\n            <div className=\"row mb-2\">\r\n                <div className=\"col-12\">\r\n                    <span className=\"state-radios\">\r\n                        {[\"ACT\", \"NSW\", \"NT\", \"QLD\", \"TAS\", \"VIC\", \"WA\"].map(x => {\r\n                            const labelClass = `border border-secondary text-center mr-2 my-1 px-3 py-2 ${state === x ? 'selected' : ''}`;\r\n                            return <React.Fragment key={`state_radio_${x}`}>\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    name=\"state\"\r\n                                    id={`state_${x}`}\r\n                                    value={x}\r\n                                    checked={state === x}\r\n                                    onChange={updateState}\r\n                                />\r\n                                <label htmlFor={`state_${x}`} className={labelClass}>\r\n                                    {x}\r\n                                </label>\r\n                            </React.Fragment>\r\n                        })\r\n                        }\r\n                    </span>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n                <div className=\"col-8 col-sm-6 col-md-6 col-lg-4\">\r\n                    <textarea id=\"suburb\" className=\"border-secondary\" rows={1} placeholder=\"Suburb(s) e.g Kew, Rye\" defaultValue={suburbs} onChange={updateSuburbs} onBlur={updateSuburbs} />\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <NumericSearchField type=\"min\" icon=\"icon-bed\" defaultValue={minBeds} updateHandler={updateMinBeds} interval={1} />\r\n                <NumericSearchField type=\"min\" icon=\"icon-bath\" defaultValue={minBaths} updateHandler={updateMinBaths} interval={1} />\r\n                <NumericSearchField type=\"min\" icon=\"icon-cab\" defaultValue={minCarSpaces} updateHandler={updateMinCarSpaces} interval={1} />\r\n                <NumericSearchField type=\"max\" icon=\"icon-dollar\" defaultValue={maxPrice} updateHandler={updateMaxPrice} interval={10000} />\r\n\r\n                {state === \"VIC\" && // TODO - Detect if the selected state has any stops\r\n                    <NumericSearchField type=\"max\" icon=\"icon-train\" defaultValue={maxDistanceFromTrain} updateHandler={updateMaxDistanceFromTrain} interval={0.25} suffix=' km' />\r\n                }\r\n                <div className=\"col-sm-6 col-md-4 col-lg-3\">\r\n                    <div className=\"mt-2\">\r\n                        <input type=\"button\" className=\"search-button px-3 rounded\" value=\"Search\" onClick={runSearch} disabled={!suburbs} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\n\r\nfunction NewTabLink(props) {\r\n    const {href, label, className} = props;\r\n    return (\r\n        <>\r\n            <a href={href} target=\"_blank\" rel=\"noopener noreferrer\" className={className}>{label}</a>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default NewTabLink;","import React from 'react';\r\nimport NewTabLink from '../newTabLink'\r\n\r\nfunction Footer() {\r\n    return (\r\n        <>\r\n            <div id=\"footer\" className=\"mb-2 p-2\">\r\n                <p className=\"mb-0\">\r\n                    &copy; 2022 <NewTabLink href=\"https://github.com/scottabutler/\" label=\"Scott Butler\" />. This site uses API data from <NewTabLink href=\"https://developer.domain.com.au/docs/introduction\" label=\"Domain\" /> and is subject to their <NewTabLink href=\"https://developer.domain.com.au/docs/support/terms\" label=\"terms of use\" />.\r\n                </p>\r\n                <p>\r\n                    Icons provided by <NewTabLink href=\"https://fontawesome.com/\" label=\"FontAwesome\" /> and bundled using <NewTabLink href=\"http://fontello.com/\" label=\"Fontello\" />.\r\n                </p>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\n\r\nfunction AgentDetails(props: {\r\n    id: string,\r\n    name: string,\r\n    photoUrl?: string,\r\n}) {\r\n    const { id, name, photoUrl } = props;\r\n\r\n    return (\r\n        <React.Fragment key={id}>\r\n            {(name || photoUrl) &&\r\n            <div className=\"w-50 d-inline-block text-center\">\r\n                <img className=\"agent-photo\" src={photoUrl} /><br />\r\n                {name &&\r\n                <span className=\"agent-name\">{name}</span>\r\n                }\r\n            </div>\r\n            }\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default AgentDetails;","import React from 'react';\r\nimport { useState } from 'react';\r\nimport { Contact } from '../../types/domain';\r\nimport AgentDetails from '../agentDetails';\r\nimport './agencyDetails.scss';\r\n\r\nfunction AgencyDetails(props: {\r\n    id: string,\r\n    name: string,\r\n    logoUrl?: string,\r\n    preferredColourHex: string,\r\n    contacts?: Contact[]\r\n}) {\r\n    const { id, name, logoUrl, preferredColourHex, contacts } = props;\r\n\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const agentBackgroundColour = preferredColourHex;\r\n    const agentTextColour = calculateTextColourForBackgroundColour(hexToRgb(agentBackgroundColour));\r\n\r\n    return (\r\n        <React.Fragment key={id}>\r\n            <div className={`agency-details px-3 ${open ? \"open\" : \"closed\"}`} style={{backgroundColor: agentBackgroundColour, color: agentTextColour}}>\r\n                <span className=\"toggle mr-2\" onClick={() => setOpen(!open)}><i className={`icon-${open ? \"up\" : \"down\"}-open`} /></span>\r\n                {!logoUrl &&\r\n                <span className=\"agency-name\">{name}</span>\r\n                }\r\n                {logoUrl &&\r\n                <img className=\"agency-logo\" src={logoUrl} />\r\n                }\r\n                {!open && contacts && contacts[0] && contacts[0].photoUrl &&\r\n                <img className=\"agent-photo\" style={{border: `3px solid ${agentBackgroundColour}`}} src={contacts[0].photoUrl} />\r\n                }\r\n                {open &&\r\n                <React.Fragment>\r\n                    {contacts &&\r\n                        <div className=\"py-3\">\r\n                            {contacts[0] &&\r\n                            <AgentDetails id={`${id}-agent-0`} name={contacts[0].name} photoUrl={contacts[0].photoUrl} />\r\n                            }\r\n                            {contacts[1] &&\r\n                            <AgentDetails id={`${id}-agent-1`} name={contacts[1].name} photoUrl={contacts[1].photoUrl} />\r\n                            }\r\n                        </div>\r\n                    }\r\n                    <div className=\"info mb-2\">\r\n                        <span>{name}</span>\r\n                    </div>\r\n                </React.Fragment>\r\n                }\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nfunction hexToRgb(hex: string): number[] {\r\n    const withoutHash = hex.replaceAll('#', '');\r\n    const parts = withoutHash.length === 3\r\n        ? [ withoutHash[0], withoutHash[1], withoutHash[2] ]\r\n        : [ withoutHash.substr(0, 2), withoutHash.substr(2, 2), withoutHash.substr(4, 2) ];\r\n    return parts.map((x) => parseInt(`0x${x}`, 16));\r\n}\r\n\r\n// https://stackoverflow.com/a/3943023\r\nfunction calculateTextColourForBackgroundColour(rgb: number[]): string {\r\n    return (rgb[0]*0.299 + rgb[1]*0.587 + rgb[2]*0.114) > 186\r\n        ? \"#000000\"\r\n        : \"#ffffff\";\r\n}\r\n\r\nexport default AgencyDetails;","import React from 'react';\r\nimport { useState } from 'react';\r\nimport './simpleCarousel.scss';\r\n\r\nfunction SimpleCarousel(props: { id: string, urls: string[], altText: string }) {\r\n    const {\r\n        id, urls, altText\r\n    } = props;\r\n\r\n    const [index, setIndex] = useState(0);\r\n    const count = urls.length;\r\n    const previousIndex = getPreviousIndex(index, count);\r\n    const nextIndex = getNextIndex(index, count)\r\n    const dots = urls.map((x, i) => {\r\n        const icon = i === index ? \"circle\" : \"circle-empty\";\r\n        return <i key={`dot_${id}_${i}`}className={`icon-${icon}`} />\r\n    });\r\n    const imgStyle = urls[index]\r\n    ? {\r\n        backgroundImage: `url('${urls[index]}')`,\r\n    }\r\n    : {};\r\n\r\n    /* Preload adjacent images to prevent flicker on scroll */\r\n    const previousImage = <img src={urls[previousIndex]} style={{display: \"none\"}} />\r\n    const nextImage = <img src={urls[nextIndex]} style={{display: \"none\"}} />\r\n\r\n    return (\r\n        <div className=\"wrapper\" key={id}>\r\n            {previousImage}{nextImage}\r\n            <div className=\"img\" style={imgStyle} title={altText} />\r\n            <div className=\"dots\">\r\n                <span>{dots}</span>\r\n            </div>\r\n            {urls.length > 1 &&\r\n            <React.Fragment>\r\n                <button className=\"back-button\" onClick={() => { setIndex(previousIndex) }}>\r\n                    <i className=\"icon-left-open\" />\r\n                </button>\r\n                <button className=\"next-button\" onClick={() => { setIndex(nextIndex) }}>\r\n                    <i className=\"icon-right-open\" />\r\n                </button>\r\n            </React.Fragment>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SimpleCarousel;\r\n\r\nfunction getPreviousIndex(current: number, count: number) {\r\n    return current === 0 ? count-1 : current-1;\r\n}\r\nfunction getNextIndex(current: number, count: number) {\r\n    return current === count-1 ? 0 : current+1;\r\n}","const _archivedDataLocalStorageKey = 'DPS_archivedListings';\r\nexport const getArchivedDataFromLocalStorage = (): {} => {\r\n    return JSON.parse(localStorage.getItem(_archivedDataLocalStorageKey) ?? '{}');\r\n}\r\n\r\nexport const isArchivedInStorage = (key: string) => {\r\n    const storageData = getArchivedDataFromLocalStorage();\r\n    return storageData && storageData[key];\r\n}\r\n\r\nexport function saveInLocalStorage(key: string, archive: boolean): void {\r\n    const storedData = getArchivedDataFromLocalStorage();\r\n\r\n    if (archive) {\r\n        storedData[key] = true;\r\n    } else {\r\n        delete storedData[key];\r\n    }\r\n\r\n    localStorage.setItem(_archivedDataLocalStorageKey, JSON.stringify(storedData));\r\n}\r\n\r\nconst _searchParamsLocalStorageKey = 'DPS_searchParams';\r\nexport function loadSearchParamsFromLocalStorage(): {\r\n    minBeds?: number;\r\n    minBaths?: number;\r\n    minCarSpaces?: number;\r\n    maxPrice?: number;\r\n    maxDistFromTrain?: number;\r\n    suburbCsv?: string;\r\n    state?: string;\r\n} {\r\n    return JSON.parse(localStorage.getItem(_searchParamsLocalStorageKey) ?? '{}');\r\n}\r\nexport function saveSearchParamsToLocalStorage(\r\n    minBeds: number,\r\n    minBaths: number,\r\n    minCarSpaces: number,\r\n    maxPrice: number,\r\n    maxDistFromTrain: number,\r\n    suburbCsv: string,\r\n    state: string): void {\r\n        window.localStorage.setItem(_searchParamsLocalStorageKey, JSON.stringify({\r\n            'minBeds': minBeds,\r\n            'minBaths': minBaths,\r\n            'minCarSpaces': minCarSpaces,\r\n            'maxPrice': maxPrice,\r\n            'maxDistFromTrain': maxDistFromTrain,\r\n            'suburbCsv': suburbCsv,\r\n            'state': state\r\n        }));\r\n};","export const getShortDay = (dateTime: string): string => {\r\n    const date = new Date(dateTime);\r\n    const options = { weekday: \"short\" } as Intl.DateTimeFormatOptions;\r\n    return new Intl.DateTimeFormat('en-US', options).format(date);\r\n}\r\n\r\nexport const getTwelveHourTime = (dateTime: string): string => {\r\n    const date = new Date(dateTime);\r\n    return date.toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\r\n}\r\n\r\nexport const getDateRange = (startDateTime: string, endDateTime: string): string => {\r\n    const startDateTimeString = getShortDateAndTime(startDateTime);\r\n    const endTime = getTwelveHourTime(endDateTime);\r\n\r\n    // Thu 12 Mar 11:15 AM - 11:45 AM\r\n    return `${startDateTimeString} - ${endTime}`;\r\n}\r\n\r\nexport const getShortDateAndTime = (dateTime: string) => {\r\n    const startTime = getTwelveHourTime(dateTime);\r\n\r\n    return `${getRelativeShortDate(dateTime, false)} ${startTime}`;\r\n}\r\n\r\nexport const getShortDate = (dateTime: string) => {\r\n    const startDate = new Date(dateTime);\r\n\r\n    const day = getShortDay(dateTime);\r\n    const date = startDate.getDate();\r\n    const month = getShortMonth(startDate.getMonth()+1);\r\n\r\n    return `${day} ${date} ${month}`;\r\n}\r\n\r\nexport const isToday = (dateTime: Date) => {\r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0);\r\n\r\n    const tomorrow = new Date();\r\n    tomorrow.setDate(tomorrow.getDate() + 1);\r\n    tomorrow.setHours(0, 0, 0, 0);\r\n\r\n    return dateTime >= today && dateTime < tomorrow;\r\n}\r\n\r\nexport const daysAsMinutes = (days: number) => {\r\n    return days * 24 * 60;\r\n}\r\n\r\nexport const getRelativeShortDate = (dateTime: string, lowercase: boolean) => {\r\n    const date = new Date(dateTime);\r\n    const today = new Date();\r\n\r\n    const tomorrow = new Date(today);\r\n    tomorrow.setDate(tomorrow.getDate() + 1);\r\n    tomorrow.setHours(0, 0, 0, 0);\r\n\r\n    if (date < tomorrow) return lowercase ? 'today' : 'Today';\r\n\r\n    const dayAfterTomorrow = new Date(tomorrow);\r\n    dayAfterTomorrow.setDate(dayAfterTomorrow.getDate() + 1);\r\n    dayAfterTomorrow.setHours(0, 0, 0, 0);\r\n\r\n    if (date < dayAfterTomorrow) return lowercase ? 'tomorrow' :  'Tomorrow';\r\n\r\n    return getShortDate(dateTime);\r\n}\r\n\r\nexport const getHourDifference = (firstDate: Date, secondDate: Date) => {\r\n    var diff = Math.round(Math.abs(firstDate.getTime() - secondDate.getTime()) / 3600000);\r\n    return diff;\r\n}\r\n\r\nexport const getDateTimeString = (date: Date) => {\r\n    return `${date.getFullYear()}-${ensureTwoDigits(date.getMonth()+1)}-${ensureTwoDigits(date.getDate())}T${ensureTwoDigits(date.getHours())}:${ensureTwoDigits(date.getMinutes())}:${ensureTwoDigits(date.getSeconds())}`;\r\n}\r\n\r\nconst ensureTwoDigits = (number: number): string => {\r\n    return number < 10 ? `0${number}` : number.toString();\r\n}\r\n\r\nconst getShortMonth = (monthIndex: number) => {\r\n    switch(monthIndex) {\r\n        case 1:  return 'Jan';\r\n        case 2:  return 'Feb';\r\n        case 3:  return 'Mar';\r\n        case 4:  return 'Apr';\r\n        case 5:  return 'May';\r\n        case 6:  return 'Jun';\r\n        case 7:  return 'Jul';\r\n        case 8:  return 'Aug';\r\n        case 9:  return 'Sep';\r\n        case 10: return 'Oct';\r\n        case 11: return 'Nov';\r\n        case 12: return 'Dec';\r\n    }\r\n}","import React from 'react';\r\nimport { useState } from 'react';\r\nimport { AuctionSchedule, InspectionSchedule } from '../../types/domain';\r\nimport { getDateRange, getShortDateAndTime, getShortDay } from '../../utils/dateTimeHelper';\r\nimport './inspectionTimes.scss';\r\n\r\nfunction InspectionTimes(props: {\r\n    id: string,\r\n    inspectionSchedule?: InspectionSchedule,\r\n    auctionSchedule?: AuctionSchedule\r\n}) {\r\n    const { id, inspectionSchedule, auctionSchedule } = props;\r\n    const [inspectionTimesOpen, setInspectionTimesOpen] = useState(false);\r\n\r\n    const times = inspectionSchedule\r\n        && inspectionSchedule.times\r\n        && inspectionSchedule.times.length > 0\r\n        ? inspectionSchedule.times.filter(x => new Date(x.openingTime) > new Date())\r\n        : [];\r\n\r\n    const isAuctionTimeInFuture = auctionSchedule\r\n        && auctionSchedule.time\r\n        && new Date(auctionSchedule.time) > new Date();\r\n\r\n    return times.length > 0 || isAuctionTimeInFuture\r\n    ? (\r\n        <React.Fragment key={id}>\r\n            <span className=\"toggle ml-1\" onClick={() => setInspectionTimesOpen(!inspectionTimesOpen)}><i className={`icon-${inspectionTimesOpen ? \"up\" : \"down\"}-open`} /></span>\r\n\r\n            {inspectionTimesOpen &&\r\n                <span className=\"d-block mt-1 ml-1\">\r\n                    <ul className=\"inspection-times pl-3 mb-2\">\r\n                        {times.map(x =>\r\n                            <li key={`${id}-inspection-${x.openingTime}`} className=\"ml-0 mb-1\">{getDateRange(x.openingTime, x.closingTime)}</li>\r\n                        )}\r\n                        {auctionSchedule && auctionSchedule.time &&\r\n                        <li key={`${id}-auction-${auctionSchedule.time}`} className=\"text-danger ml-0 mb-1\"><i className=\"icon-hammer\" /> {getShortDateAndTime(auctionSchedule.time)}</li>\r\n                        }\r\n                    </ul>\r\n                </span>\r\n            }\r\n        </React.Fragment>\r\n    ) : <></>;\r\n}\r\n\r\nexport default InspectionTimes;","import React from 'react';\r\nimport { getHourDifference, isToday } from '../../utils/dateTimeHelper';\r\nimport './addedTag.scss';\r\n\r\nfunction AddedTag(props: {\r\n    id: string,\r\n    dateListed: string\r\n}) {\r\n    const { id, dateListed } = props;\r\n\r\n    const getAddedTagText = (dateListed: string): string => {\r\n        const now = new Date();\r\n        const listingDate = new Date(dateListed);\r\n        const addedHoursAgo = getHourDifference(now, listingDate);\r\n        const addedDaysAgo = Math.floor(addedHoursAgo / 24);\r\n\r\n        if (addedHoursAgo < 1) return \"ADDED JUST NOW\";\r\n\r\n        if (addedHoursAgo < 2) return \"ADDED 1 HOUR AGO\";\r\n\r\n        if (isToday(listingDate)) return `ADDED ${addedHoursAgo} HOURS AGO`;\r\n\r\n        if (addedDaysAgo < 2) return \"ADDED YESTERDAY\";\r\n\r\n        if (addedDaysAgo < 8) return `ADDED ${addedDaysAgo} DAYS AGO`;\r\n\r\n        return \"\";\r\n    };\r\n\r\n    const addedTagText = getAddedTagText(dateListed);\r\n    const addedTag = addedTagText != \"\"\r\n        ? <span className=\"added-date\">{addedTagText}</span>\r\n        : <></>\r\n\r\n    return (\r\n        <React.Fragment key={id}>\r\n            {addedTag}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default AddedTag;","import React from 'react';\r\nimport './listingProgressBar.scss';\r\n\r\nfunction ListingProgressBar(props: {\r\n    id: string,\r\n    dateListed: string,\r\n    auctionScheduleTime?: string\r\n}) {\r\n    const { id, dateListed, auctionScheduleTime } = props;\r\n\r\n    const msToDaysMultiplier = 1000 * 60 * 60 * 24;\r\n\r\n    const dateListedDays = Math.round(new Date(dateListed).getTime() / msToDaysMultiplier);\r\n    const auctionDateDays = auctionScheduleTime ? Math.round(new Date(auctionScheduleTime).getTime() / msToDaysMultiplier) : 0;\r\n    const nowDays = Math.round(new Date().getTime() / msToDaysMultiplier);\r\n\r\n    const min = 0;\r\n    const max = 100;\r\n    const progress = Math.round((auctionDateDays > 0 ? ((nowDays - dateListedDays) / (auctionDateDays - dateListedDays)) : 0) * 100);\r\n\r\n    return (\r\n        <React.Fragment key={id}>\r\n            <div className=\"progress\" style={{height: \"2px\"}}>\r\n                    <div\r\n                        className=\"progress-bar\"\r\n                        role=\"progressbar\"\r\n                        style={{width: `${progress}%`}}\r\n                        aria-valuenow={progress}\r\n                        aria-valuemin={min}\r\n                        aria-valuemax={max}\r\n                    >\r\n                    </div>\r\n                </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default ListingProgressBar;","import React, { useState } from 'react';\r\nimport AgencyDetails from '../agencyDetails';\r\nimport NewTabLink from '../newTabLink';\r\nimport SimpleCarousel from '../simpleCarousel';\r\nimport './searchResult.scss';\r\nimport { isArchivedInStorage, saveInLocalStorage } from '../../utils/localStorageHelper';\r\nimport { getRelativeShortDate } from '../../utils/dateTimeHelper';\r\nimport InspectionTimes from '../inspectionTimes';\r\nimport DomainListingWrapper from '../../types/domain';\r\nimport AddedTag from '../addedTag';\r\nimport ListingProgressBar from '../listingProgressBar';\r\n\r\nfunction SearchResult(props: {closestStops: any, data: DomainListingWrapper, showArchived: boolean}) {\r\n    const {\r\n        closestStops, data, showArchived\r\n    } = props;\r\n\r\n    const [isArchived, setIsArchived] = useState(isArchivedInStorage(data.listing.listingSlug));\r\n    const href = `https://domain.com.au/${data.listing.listingSlug}`;\r\n    const streetAddress = data.listing.propertyDetails.unitNumber\r\n        ? `${data.listing.propertyDetails.unitNumber}/${data.listing.propertyDetails.streetNumber} ${data.listing.propertyDetails.street}`\r\n        : `${data.listing.propertyDetails.streetNumber} ${data.listing.propertyDetails.street}`;\r\n    const imageAltText = `Image for ${streetAddress}`;\r\n\r\n    const agent = data.listing.advertiser;\r\n\r\n    //Select at most the first two closest stops, then add markup for rendering\r\n    const closestStopsMarkup = closestStops\r\n        .filter((stop, i) => { return i < 2 })\r\n        .map(y => {\r\n            const key = `${data.listing.listingSlug}_${y.stop_name.replace(' ', '')}`;\r\n            return <span className=\"col-12\" key={key}>\r\n                <i className=\"icon-train\" />\r\n                {y.stop_name.replace(' Station', '')}: {Math.round(y.distance * 10) / 10}km\r\n                <a target=\"_blank\" className=\"ml-1 dark-link\" href={`https://www.google.com/maps/dir/${data.listing.propertyDetails.latitude},${data.listing.propertyDetails.longitude}/${y.latitude},${y.longitude}/data=!3m1!4b1!4m2!4m1!3e2`}>\r\n                    <i className=\"icon-direction\" />\r\n                </a>\r\n            </span>\r\n        });\r\n    const imageUrls = (data.listing.media ?? [])\r\n        .filter(x => x.category === \"Image\")\r\n        .map(y => `${y.url}/500x500`);\r\n\r\n    const parsePropertyType = (propertyType: string, unitNumber: string, description: string) => {\r\n        switch (propertyType.toLowerCase()) {\r\n            case \"NewApartments\".toLowerCase():\r\n                return \"New Apartment\"\r\n            case \"ApartmentUnitFlat\".toLowerCase():\r\n                // Check the description first, to see if apartment or unit are mentioned\r\n                if (description.toLowerCase().indexOf(\"apartment\") >= 0) {\r\n                    return \"Apartment\";\r\n                }\r\n                if (description.toLowerCase().indexOf(\"unit\") >= 0) {\r\n                    return \"Unit\";\r\n                }\r\n\r\n                // If it's only numeric, use the value to guess if it's an apartment\r\n                if (new RegExp(/^\\d+$/).test(unitNumber)) {\r\n                    const numericUnitNumber = parseInt(unitNumber);\r\n\r\n                    // If it's > 99, it's almost definitely an apartment\r\n                    if (numericUnitNumber > 99) {\r\n                        return \"Apartment\";\r\n                    }\r\n\r\n                    // If it's < 20, it's possibly a unit\r\n                    if (numericUnitNumber < 30) {\r\n                        return \"Unit\";\r\n                    }\r\n                } else {\r\n                    // If it contains a G, it's likely a ground floor apartment\r\n                    if (unitNumber.toLowerCase().indexOf(\"g\") >= 0) {\r\n                        return \"Apartment\";\r\n                    }\r\n\r\n                    // If it contains an A or B, it's potentially a subdivision so likely a unit\r\n                    if (new RegExp(/[ABab]/).test(unitNumber)) {\r\n                        return \"Unit\";\r\n                    }\r\n                }\r\n\r\n                // If nothing matched, return a combined value\r\n                return \"Apartment / Unit\";\r\n            case \"House\".toLowerCase():\r\n            case \"Townhouse\".toLowerCase():\r\n            default:\r\n                return propertyType;\r\n        }\r\n    }\r\n\r\n    const propertyType = parsePropertyType(\r\n        data.listing.propertyDetails.propertyType,\r\n        data.listing.propertyDetails.unitNumber,\r\n        data.listing.summaryDescription\r\n    );\r\n\r\n    const isAuctionTimeInFuture = data?.listing?.auctionSchedule\r\n        && data.listing.auctionSchedule.time\r\n        && new Date(data.listing.auctionSchedule.time) > new Date()\r\n        ? true : false;\r\n\r\n    const openTimes = (data?.listing?.inspectionSchedule?.times ?? []).filter(x => new Date(x.openingTime) > new Date());\r\n\r\n    const openTime = openTimes[0]\r\n        ? getRelativeShortDate(openTimes[0].openingTime, true)\r\n        : undefined;\r\n\r\n    const auctionDate = data?.listing?.auctionSchedule?.time\r\n        ? getRelativeShortDate(data.listing.auctionSchedule.time, false)\r\n        : undefined;\r\n\r\n    return !isArchived || (isArchived && showArchived)\r\n    ? (\r\n        <React.Fragment key={data.listing.listingSlug}>\r\n            <div className=\"my-2 mx-3 search-result-wrapper\">\r\n                <div className={`search-result h-100 ${isArchived ? 'archived' : ''}`}>\r\n                    <div className=\"border border-secondary h-100 shadow d-flex flex-column \">\r\n                        <div className=\"px-0 text-center overflow-hidden carousel\">\r\n                            <SimpleCarousel\r\n                                id={data.listing.listingSlug}\r\n                                urls={imageUrls}\r\n                                altText={imageAltText}\r\n                            />\r\n                            <AddedTag id={`addedTag_${data.listing.listingSlug}`} dateListed={data.listing.dateListed} />\r\n                        </div>\r\n                        <AgencyDetails\r\n                            id={`agency_${data.listing.listingSlug}`}\r\n                            name={agent.name}\r\n                            logoUrl={agent.logoUrl}\r\n                            preferredColourHex={agent.preferredColourHex}\r\n                            contacts={agent.contacts}\r\n                            key={`agent_${data.listing.listingSlug}`} />\r\n                        <div className=\"px-3 pt-1 pb-2 mb-auto\">\r\n                            <span className=\"d-block font-weight-bold text-truncate\">{data.listing.priceDetails.displayPrice}</span>\r\n                            <span className=\"d-block\">{streetAddress}</span>\r\n                            <span className=\"d-block\">\r\n                                {data.listing.propertyDetails.suburb} {data.listing.propertyDetails.state} {data.listing.propertyDetails.postcode}\r\n                                <a target=\"_blank\" className=\"ml-1 dark-link\" href={`https://www.google.com/maps/search/?api=1&query=${data.listing.propertyDetails.latitude},${data.listing.propertyDetails.longitude}`}>\r\n                                    <i className=\"icon-map-o\" />\r\n                                </a>\r\n                            </span>\r\n                            <span className=\"d-block mt-1\">\r\n                                <ListingProgressBar id={`listingProgressBar_${data.listing.listingSlug}`} dateListed={data.listing.dateListed} auctionScheduleTime={data.listing.auctionSchedule?.time} />\r\n                            </span>\r\n                            <span className=\"d-block my-1\">\r\n                                <span className=\"badge badge-pill badge-secondary\">\r\n                                    {propertyType}\r\n                                </span>\r\n                                {openTime &&\r\n                                    <span className=\"badge badge-pill badge-success ml-2\">\r\n                                        Open {openTime}\r\n                                    </span>\r\n                                }\r\n                                {!openTime && isAuctionTimeInFuture && auctionDate &&\r\n                                     <span className=\"badge badge-pill badge-danger ml-2\">\r\n                                        Auction {auctionDate}\r\n                                    </span>\r\n                                }\r\n                                {(openTime || isAuctionTimeInFuture) &&\r\n                                    <InspectionTimes\r\n                                        id={`inspections_${data.listing.listingSlug}`}\r\n                                        inspectionSchedule={data.listing.inspectionSchedule}\r\n                                        auctionSchedule={data.listing.auctionSchedule}\r\n                                    />\r\n                                }\r\n                            </span>\r\n                            <span className=\"d-block\">\r\n                                <span className=\"icon-wrapper\"><i className=\"icon-bed\" />{data.listing.propertyDetails.bedrooms}</span>\r\n                                <span className=\"icon-wrapper\"><i className=\"icon-bath\" />{data.listing.propertyDetails.bathrooms}</span>\r\n                                <span className=\"icon-wrapper\"><i className=\"icon-cab\" />{data.listing.propertyDetails.carspaces}</span>\r\n                                {auctionDate && isAuctionTimeInFuture &&\r\n                                    <span className=\"icon-wrapper text-danger\"><i className=\"icon-hammer mr-1\" />{auctionDate}</span>\r\n                                }\r\n                            </span>\r\n                            <span className=\"row mt-1\">{closestStopsMarkup}</span>\r\n                        </div>\r\n                        <div className=\"row text-center mb-2\">\r\n                            <span className=\"col-6\"><NewTabLink href={href} label=\"View\" className=\"text-success\" /></span>\r\n                            <span className=\"col-6\"><a href=\"javascript:(0);\" className={!isArchived ? \"text-danger\" : \"\"} onClick={() => {\r\n                                setIsArchived(!isArchived)\r\n                                saveInLocalStorage(data.listing.listingSlug, !isArchived);\r\n                            }}>{isArchived ? 'Show' : 'Hide'}</a></span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n    : <React.Fragment />;\r\n}\r\n\r\nexport default SearchResult;","const stops = [{\r\n  \"stop_suburb\": \"Pakenham\",\r\n  \"stop_name\": \"Pakenham Station\",\r\n  \"stop_latitude\": -38.0806122,\r\n  \"stop_longitude\": 145.486374\r\n}, {\r\n  \"stop_suburb\": \"Pakenham\",\r\n  \"stop_name\": \"Cardinia Road Station\",\r\n  \"stop_latitude\": -38.07129,\r\n  \"stop_longitude\": 145.43779\r\n}, {\r\n  \"stop_suburb\": \"Officer\",\r\n  \"stop_name\": \"Officer Station\",\r\n  \"stop_latitude\": -38.066143,\r\n  \"stop_longitude\": 145.411\r\n}, {\r\n  \"stop_suburb\": \"Beaconsfield\",\r\n  \"stop_name\": \"Beaconsfield Station\",\r\n  \"stop_latitude\": -38.050827,\r\n  \"stop_longitude\": 145.366074\r\n}, {\r\n  \"stop_suburb\": \"Belgrave\",\r\n  \"stop_name\": \"Belgrave Station\",\r\n  \"stop_latitude\": -37.9091,\r\n  \"stop_longitude\": 145.355286\r\n}, {\r\n  \"stop_suburb\": \"Lilydale\",\r\n  \"stop_name\": \"Lilydale Station\",\r\n  \"stop_latitude\": -37.7555161,\r\n  \"stop_longitude\": 145.347717\r\n}, {\r\n  \"stop_suburb\": \"Berwick\",\r\n  \"stop_name\": \"Berwick Station\",\r\n  \"stop_latitude\": -38.04041,\r\n  \"stop_longitude\": 145.345718\r\n}, {\r\n  \"stop_suburb\": \"Tecoma\",\r\n  \"stop_name\": \"Tecoma Station\",\r\n  \"stop_latitude\": -37.9081154,\r\n  \"stop_longitude\": 145.343\r\n}, {\r\n  \"stop_suburb\": \"Upwey\",\r\n  \"stop_name\": \"Upwey Station\",\r\n  \"stop_latitude\": -37.90369,\r\n  \"stop_longitude\": 145.331329\r\n}, {\r\n  \"stop_suburb\": \"Mooroolbark\",\r\n  \"stop_name\": \"Mooroolbark Station\",\r\n  \"stop_latitude\": -37.7847481,\r\n  \"stop_longitude\": 145.312408\r\n}, {\r\n  \"stop_suburb\": \"Upper Ferntree Gully\",\r\n  \"stop_name\": \"Upper Ferntree Gully Station\",\r\n  \"stop_latitude\": -37.8926735,\r\n  \"stop_longitude\": 145.307526\r\n}, {\r\n  \"stop_suburb\": \"Narre Warren\",\r\n  \"stop_name\": \"Narre Warren Station\",\r\n  \"stop_latitude\": -38.02781,\r\n  \"stop_longitude\": 145.30397\r\n}, {\r\n  \"stop_suburb\": \"Ferntree Gully\",\r\n  \"stop_name\": \"Ferntree Gully Station\",\r\n  \"stop_latitude\": -37.8817,\r\n  \"stop_longitude\": 145.295258\r\n}, {\r\n  \"stop_suburb\": \"Boronia\",\r\n  \"stop_name\": \"Boronia Station\",\r\n  \"stop_latitude\": -37.8604546,\r\n  \"stop_longitude\": 145.284378\r\n}, {\r\n  \"stop_suburb\": \"Cranbourne\",\r\n  \"stop_name\": \"Cranbourne Station\",\r\n  \"stop_latitude\": -38.09954,\r\n  \"stop_longitude\": 145.2806\r\n}, {\r\n  \"stop_suburb\": \"Croydon\",\r\n  \"stop_name\": \"Croydon Station\",\r\n  \"stop_latitude\": -37.79544,\r\n  \"stop_longitude\": 145.2806\r\n}, {\r\n  \"stop_suburb\": \"Hallam\",\r\n  \"stop_name\": \"Hallam Station\",\r\n  \"stop_latitude\": -38.0177422,\r\n  \"stop_longitude\": 145.269775\r\n}, {\r\n  \"stop_suburb\": \"Bayswater\",\r\n  \"stop_name\": \"Bayswater Station\",\r\n  \"stop_latitude\": -37.84173,\r\n  \"stop_longitude\": 145.268143\r\n}, {\r\n  \"stop_suburb\": \"Cranbourne North\",\r\n  \"stop_name\": \"Merinda Park Station\",\r\n  \"stop_latitude\": -38.0790024,\r\n  \"stop_longitude\": 145.2635\r\n}, {\r\n  \"stop_suburb\": \"Ringwood East\",\r\n  \"stop_name\": \"Ringwood East Station\",\r\n  \"stop_latitude\": -37.81197,\r\n  \"stop_longitude\": 145.2502\r\n}, {\r\n  \"stop_suburb\": \"Lynbrook\",\r\n  \"stop_name\": \"Lynbrook Station\",\r\n  \"stop_latitude\": -38.0573463,\r\n  \"stop_longitude\": 145.249283\r\n}, {\r\n  \"stop_suburb\": \"Heathmont\",\r\n  \"stop_name\": \"Heathmont Station\",\r\n  \"stop_latitude\": -37.82832,\r\n  \"stop_longitude\": 145.244553\r\n}, {\r\n  \"stop_suburb\": \"Ringwood\",\r\n  \"stop_name\": \"Ringwood Station\",\r\n  \"stop_latitude\": -37.8156624,\r\n  \"stop_longitude\": 145.229477\r\n}, {\r\n  \"stop_suburb\": \"Crib Point\",\r\n  \"stop_name\": \"Stony Point Station\",\r\n  \"stop_latitude\": -38.3742371,\r\n  \"stop_longitude\": 145.221848\r\n}, {\r\n  \"stop_suburb\": \"Ringwood\",\r\n  \"stop_name\": \"Heatherdale Station\",\r\n  \"stop_latitude\": -37.81884,\r\n  \"stop_longitude\": 145.213547\r\n}, {\r\n  \"stop_suburb\": \"Dandenong\",\r\n  \"stop_name\": \"Dandenong Station\",\r\n  \"stop_latitude\": -37.9899673,\r\n  \"stop_longitude\": 145.209732\r\n}, {\r\n  \"stop_suburb\": \"Crib Point\",\r\n  \"stop_name\": \"Crib Point Station\",\r\n  \"stop_latitude\": -38.36612,\r\n  \"stop_longitude\": 145.204041\r\n}, {\r\n  \"stop_suburb\": \"Mitcham\",\r\n  \"stop_name\": \"Mitcham Station\",\r\n  \"stop_latitude\": -37.8180847,\r\n  \"stop_longitude\": 145.192886\r\n}, {\r\n  \"stop_suburb\": \"Hurstbridge\",\r\n  \"stop_name\": \"Hurstbridge Station\",\r\n  \"stop_latitude\": -37.6394,\r\n  \"stop_longitude\": 145.192017\r\n}, {\r\n  \"stop_suburb\": \"Noble Park\",\r\n  \"stop_name\": \"Yarraman Station\",\r\n  \"stop_latitude\": -37.9782524,\r\n  \"stop_longitude\": 145.1916\r\n}, {\r\n  \"stop_suburb\": \"Crib Point\",\r\n  \"stop_name\": \"Morradoo Station\",\r\n  \"stop_latitude\": -38.3540344,\r\n  \"stop_longitude\": 145.1896\r\n}, {\r\n  \"stop_suburb\": \"Tyabb\",\r\n  \"stop_name\": \"Tyabb Station\",\r\n  \"stop_latitude\": -38.2598152,\r\n  \"stop_longitude\": 145.1864\r\n}, {\r\n  \"stop_suburb\": \"Hastings\",\r\n  \"stop_name\": \"Hastings Station\",\r\n  \"stop_latitude\": -38.30566,\r\n  \"stop_longitude\": 145.185974\r\n}, {\r\n  \"stop_suburb\": \"Wattle Glen\",\r\n  \"stop_name\": \"Wattle Glen Station\",\r\n  \"stop_latitude\": -37.6639671,\r\n  \"stop_longitude\": 145.181625\r\n}, {\r\n  \"stop_suburb\": \"Bittern\",\r\n  \"stop_name\": \"Bittern Station\",\r\n  \"stop_latitude\": -38.33739,\r\n  \"stop_longitude\": 145.178024\r\n}, {\r\n  \"stop_suburb\": \"Noble Park\",\r\n  \"stop_name\": \"Noble Park Station\",\r\n  \"stop_latitude\": -37.9666252,\r\n  \"stop_longitude\": 145.176331\r\n}, {\r\n  \"stop_suburb\": \"Somerville\",\r\n  \"stop_name\": \"Somerville Station\",\r\n  \"stop_latitude\": -38.22534,\r\n  \"stop_longitude\": 145.176239\r\n}, {\r\n  \"stop_suburb\": \"Nunawading\",\r\n  \"stop_name\": \"Nunawading Station\",\r\n  \"stop_latitude\": -37.8204231,\r\n  \"stop_longitude\": 145.175232\r\n}, {\r\n  \"stop_suburb\": \"Springvale\",\r\n  \"stop_name\": \"Sandown Park Station\",\r\n  \"stop_latitude\": -37.9565,\r\n  \"stop_longitude\": 145.162827\r\n}, {\r\n  \"stop_suburb\": \"Glen Waverley\",\r\n  \"stop_name\": \"Glen Waverley Station\",\r\n  \"stop_latitude\": -37.8795,\r\n  \"stop_longitude\": 145.162064\r\n}, {\r\n  \"stop_suburb\": \"Baxter\",\r\n  \"stop_name\": \"Baxter Station\",\r\n  \"stop_latitude\": -38.194046,\r\n  \"stop_longitude\": 145.160522\r\n}, {\r\n  \"stop_suburb\": \"Diamond Creek\",\r\n  \"stop_name\": \"Diamond Creek Station\",\r\n  \"stop_latitude\": -37.6732941,\r\n  \"stop_longitude\": 145.158508\r\n}, {\r\n  \"stop_suburb\": \"Springvale\",\r\n  \"stop_name\": \"Springvale Station\",\r\n  \"stop_latitude\": -37.9495125,\r\n  \"stop_longitude\": 145.153458\r\n}, {\r\n  \"stop_suburb\": \"Blackburn\",\r\n  \"stop_name\": \"Blackburn Station\",\r\n  \"stop_latitude\": -37.82007,\r\n  \"stop_longitude\": 145.150009\r\n}, {\r\n  \"stop_suburb\": \"Glen Waverley\",\r\n  \"stop_name\": \"Syndal Station\",\r\n  \"stop_latitude\": -37.87623,\r\n  \"stop_longitude\": 145.14978\r\n}, {\r\n  \"stop_suburb\": \"Eltham\",\r\n  \"stop_name\": \"Eltham Station\",\r\n  \"stop_latitude\": -37.71355,\r\n  \"stop_longitude\": 145.147827\r\n}, {\r\n  \"stop_suburb\": \"Blackburn\",\r\n  \"stop_name\": \"Laburnum Station\",\r\n  \"stop_latitude\": -37.8207779,\r\n  \"stop_longitude\": 145.1407\r\n}, {\r\n  \"stop_suburb\": \"Frankston\",\r\n  \"stop_name\": \"Leawarra Station\",\r\n  \"stop_latitude\": -38.1520348,\r\n  \"stop_longitude\": 145.139542\r\n}, {\r\n  \"stop_suburb\": \"Clayton South\",\r\n  \"stop_name\": \"Westall Station\",\r\n  \"stop_latitude\": -37.93849,\r\n  \"stop_longitude\": 145.13884\r\n}, {\r\n  \"stop_suburb\": \"Seaford\",\r\n  \"stop_name\": \"Kananook Station\",\r\n  \"stop_latitude\": -38.12174,\r\n  \"stop_longitude\": 145.135284\r\n}, {\r\n  \"stop_suburb\": \"Seaford\",\r\n  \"stop_name\": \"Seaford Station\",\r\n  \"stop_latitude\": -38.1040154,\r\n  \"stop_longitude\": 145.128235\r\n}, {\r\n  \"stop_suburb\": \"Mount Waverley\",\r\n  \"stop_name\": \"Mount Waverley Station\",\r\n  \"stop_latitude\": -37.87525,\r\n  \"stop_longitude\": 145.128052\r\n}, {\r\n  \"stop_suburb\": \"Frankston\",\r\n  \"stop_name\": \"Frankston Station\",\r\n  \"stop_latitude\": -38.1429863,\r\n  \"stop_longitude\": 145.12616\r\n}, {\r\n  \"stop_suburb\": \"Carrum\",\r\n  \"stop_name\": \"Carrum Station\",\r\n  \"stop_latitude\": -38.0748978,\r\n  \"stop_longitude\": 145.122421\r\n}, {\r\n  \"stop_suburb\": \"Montmorency\",\r\n  \"stop_name\": \"Montmorency Station\",\r\n  \"stop_latitude\": -37.7152977,\r\n  \"stop_longitude\": 145.1215\r\n}, {\r\n  \"stop_suburb\": \"Box Hill\",\r\n  \"stop_name\": \"Box Hill Station\",\r\n  \"stop_latitude\": -37.8192177,\r\n  \"stop_longitude\": 145.121429\r\n}, {\r\n  \"stop_suburb\": \"Clayton\",\r\n  \"stop_name\": \"Clayton Station\",\r\n  \"stop_latitude\": -37.9251671,\r\n  \"stop_longitude\": 145.120682\r\n}, {\r\n  \"stop_suburb\": \"Bonbeach\",\r\n  \"stop_name\": \"Bonbeach Station\",\r\n  \"stop_latitude\": -38.0629463,\r\n  \"stop_longitude\": 145.119675\r\n}, {\r\n  \"stop_suburb\": \"Chelsea\",\r\n  \"stop_name\": \"Chelsea Station\",\r\n  \"stop_latitude\": -38.05196,\r\n  \"stop_longitude\": 145.116043\r\n}, {\r\n  \"stop_suburb\": \"Mount Waverley\",\r\n  \"stop_name\": \"Jordanville Station\",\r\n  \"stop_latitude\": -37.8736,\r\n  \"stop_longitude\": 145.112091\r\n}, {\r\n  \"stop_suburb\": \"Edithvale\",\r\n  \"stop_name\": \"Edithvale Station\",\r\n  \"stop_latitude\": -38.0380554,\r\n  \"stop_longitude\": 145.108536\r\n}, {\r\n  \"stop_suburb\": \"Greensborough\",\r\n  \"stop_name\": \"Greensborough Station\",\r\n  \"stop_latitude\": -37.70395,\r\n  \"stop_longitude\": 145.108246\r\n}, {\r\n  \"stop_suburb\": \"Mont Albert\",\r\n  \"stop_name\": \"Mont Albert Station\",\r\n  \"stop_latitude\": -37.8194275,\r\n  \"stop_longitude\": 145.10553\r\n}, {\r\n  \"stop_suburb\": \"Oakleigh\",\r\n  \"stop_name\": \"Huntingdale Station\",\r\n  \"stop_latitude\": -37.91102,\r\n  \"stop_longitude\": 145.102371\r\n}, {\r\n  \"stop_suburb\": \"Aspendale\",\r\n  \"stop_name\": \"Aspendale Station\",\r\n  \"stop_latitude\": -38.02722,\r\n  \"stop_longitude\": 145.102158\r\n}, {\r\n  \"stop_suburb\": \"Mernda\",\r\n  \"stop_name\": \"Mernda Station\",\r\n  \"stop_latitude\": -37.60255,\r\n  \"stop_longitude\": 145.100876\r\n}, {\r\n  \"stop_suburb\": \"Surrey Hills\",\r\n  \"stop_name\": \"Surrey Hills Station\",\r\n  \"stop_latitude\": -37.8241425,\r\n  \"stop_longitude\": 145.098785\r\n}, {\r\n  \"stop_suburb\": \"South Morang\",\r\n  \"stop_name\": \"Hawkstowe Station\",\r\n  \"stop_latitude\": -37.6229935,\r\n  \"stop_longitude\": 145.0974\r\n}, {\r\n  \"stop_suburb\": \"South Morang\",\r\n  \"stop_name\": \"Middle Gorge Station\",\r\n  \"stop_latitude\": -37.644062,\r\n  \"stop_longitude\": 145.092133\r\n}, {\r\n  \"stop_suburb\": \"Malvern East\",\r\n  \"stop_name\": \"Holmesglen Station\",\r\n  \"stop_latitude\": -37.8744,\r\n  \"stop_longitude\": 145.090652\r\n}, {\r\n  \"stop_suburb\": \"Surrey Hills\",\r\n  \"stop_name\": \"Chatham Station\",\r\n  \"stop_latitude\": -37.8243027,\r\n  \"stop_longitude\": 145.088654\r\n}, {\r\n  \"stop_suburb\": \"Oakleigh\",\r\n  \"stop_name\": \"Oakleigh Station\",\r\n  \"stop_latitude\": -37.9003677,\r\n  \"stop_longitude\": 145.088318\r\n}, {\r\n  \"stop_suburb\": \"Mordialloc\",\r\n  \"stop_name\": \"Mordialloc Station\",\r\n  \"stop_latitude\": -38.006588,\r\n  \"stop_longitude\": 145.087662\r\n}, {\r\n  \"stop_suburb\": \"Watsonia\",\r\n  \"stop_name\": \"Watsonia Station\",\r\n  \"stop_latitude\": -37.7109528,\r\n  \"stop_longitude\": 145.0838\r\n}, {\r\n  \"stop_suburb\": \"Ashburton\",\r\n  \"stop_name\": \"Ashburton Station\",\r\n  \"stop_latitude\": -37.86197,\r\n  \"stop_longitude\": 145.081345\r\n}, {\r\n  \"stop_suburb\": \"Canterbury\",\r\n  \"stop_name\": \"Canterbury Station\",\r\n  \"stop_latitude\": -37.82449,\r\n  \"stop_longitude\": 145.081223\r\n}, {\r\n  \"stop_suburb\": \"Glen Iris\",\r\n  \"stop_name\": \"Burwood Station\",\r\n  \"stop_latitude\": -37.8515625,\r\n  \"stop_longitude\": 145.0805\r\n}, {\r\n  \"stop_suburb\": \"Ashburton\",\r\n  \"stop_name\": \"Alamein Station\",\r\n  \"stop_latitude\": -37.8683167,\r\n  \"stop_longitude\": 145.079666\r\n}, {\r\n  \"stop_suburb\": \"Hughesdale\",\r\n  \"stop_name\": \"Hughesdale Station\",\r\n  \"stop_latitude\": -37.89488,\r\n  \"stop_longitude\": 145.077637\r\n}, {\r\n  \"stop_suburb\": \"Parkdale\",\r\n  \"stop_name\": \"Parkdale Station\",\r\n  \"stop_latitude\": -37.9930763,\r\n  \"stop_longitude\": 145.076324\r\n}, {\r\n  \"stop_suburb\": \"Camberwell\",\r\n  \"stop_name\": \"Hartwell Station\",\r\n  \"stop_latitude\": -37.8439827,\r\n  \"stop_longitude\": 145.075562\r\n}, {\r\n  \"stop_suburb\": \"Camberwell\",\r\n  \"stop_name\": \"Willison Station\",\r\n  \"stop_latitude\": -37.8357124,\r\n  \"stop_longitude\": 145.0703\r\n}, {\r\n  \"stop_suburb\": \"Camberwell\",\r\n  \"stop_name\": \"Riversdale Station\",\r\n  \"stop_latitude\": -37.8315,\r\n  \"stop_longitude\": 145.069641\r\n}, {\r\n  \"stop_suburb\": \"Malvern East\",\r\n  \"stop_name\": \"East Malvern Station\",\r\n  \"stop_latitude\": -37.87693,\r\n  \"stop_longitude\": 145.0694\r\n}, {\r\n  \"stop_suburb\": \"Macleod\",\r\n  \"stop_name\": \"Macleod Station\",\r\n  \"stop_latitude\": -37.72601,\r\n  \"stop_longitude\": 145.069153\r\n}, {\r\n  \"stop_suburb\": \"Camberwell\",\r\n  \"stop_name\": \"East Camberwell Station\",\r\n  \"stop_latitude\": -37.8258934,\r\n  \"stop_longitude\": 145.068192\r\n}, {\r\n  \"stop_suburb\": \"Murrumbeena\",\r\n  \"stop_name\": \"Murrumbeena Station\",\r\n  \"stop_latitude\": -37.8901978,\r\n  \"stop_longitude\": 145.067383\r\n}, {\r\n  \"stop_suburb\": \"South Morang\",\r\n  \"stop_name\": \"South Morang Station\",\r\n  \"stop_latitude\": -37.6491623,\r\n  \"stop_longitude\": 145.067032\r\n}, {\r\n  \"stop_suburb\": \"Rosanna\",\r\n  \"stop_name\": \"Rosanna Station\",\r\n  \"stop_latitude\": -37.7428741,\r\n  \"stop_longitude\": 145.066147\r\n}, {\r\n  \"stop_suburb\": \"Mentone\",\r\n  \"stop_name\": \"Mentone Station\",\r\n  \"stop_latitude\": -37.9818649,\r\n  \"stop_longitude\": 145.06517\r\n}, {\r\n  \"stop_suburb\": \"Malvern East\",\r\n  \"stop_name\": \"Darling Station\",\r\n  \"stop_latitude\": -37.8689575,\r\n  \"stop_longitude\": 145.062943\r\n}, {\r\n  \"stop_suburb\": \"Heidelberg\",\r\n  \"stop_name\": \"Heidelberg Station\",\r\n  \"stop_latitude\": -37.7570763,\r\n  \"stop_longitude\": 145.060684\r\n}, {\r\n  \"stop_suburb\": \"Camberwell\",\r\n  \"stop_name\": \"Camberwell Station\",\r\n  \"stop_latitude\": -37.8265648,\r\n  \"stop_longitude\": 145.058685\r\n}, {\r\n  \"stop_suburb\": \"Carnegie\",\r\n  \"stop_name\": \"Carnegie Station\",\r\n  \"stop_latitude\": -37.88624,\r\n  \"stop_longitude\": 145.058578\r\n}, {\r\n  \"stop_suburb\": \"Glen Iris\",\r\n  \"stop_name\": \"Glen Iris Station\",\r\n  \"stop_latitude\": -37.8593063,\r\n  \"stop_longitude\": 145.058228\r\n}, {\r\n  \"stop_suburb\": \"Cheltenham\",\r\n  \"stop_name\": \"Cheltenham Station\",\r\n  \"stop_latitude\": -37.9666519,\r\n  \"stop_longitude\": 145.05455\r\n}, {\r\n  \"stop_suburb\": \"Eaglemont\",\r\n  \"stop_name\": \"Eaglemont Station\",\r\n  \"stop_latitude\": -37.7635841,\r\n  \"stop_longitude\": 145.05394\r\n}, {\r\n  \"stop_suburb\": \"Glen Iris\",\r\n  \"stop_name\": \"Gardiner Station\",\r\n  \"stop_latitude\": -37.8532829,\r\n  \"stop_longitude\": 145.051666\r\n}, {\r\n  \"stop_suburb\": \"Cheltenham\",\r\n  \"stop_name\": \"Southland Station\",\r\n  \"stop_latitude\": -37.95876,\r\n  \"stop_longitude\": 145.049118\r\n}, {\r\n  \"stop_suburb\": \"Hawthorn East\",\r\n  \"stop_name\": \"Auburn Station\",\r\n  \"stop_latitude\": -37.8224,\r\n  \"stop_longitude\": 145.045837\r\n}, {\r\n  \"stop_suburb\": \"Ivanhoe\",\r\n  \"stop_name\": \"Ivanhoe Station\",\r\n  \"stop_latitude\": -37.768898,\r\n  \"stop_longitude\": 145.045425\r\n}, {\r\n  \"stop_suburb\": \"Caulfield East\",\r\n  \"stop_name\": \"Caulfield Station\",\r\n  \"stop_latitude\": -37.8774567,\r\n  \"stop_longitude\": 145.042526\r\n}, {\r\n  \"stop_suburb\": \"Glen Huntly\",\r\n  \"stop_name\": \"Glenhuntly Station\",\r\n  \"stop_latitude\": -37.8897171,\r\n  \"stop_longitude\": 145.042221\r\n}, {\r\n  \"stop_suburb\": \"Highett\",\r\n  \"stop_name\": \"Highett Station\",\r\n  \"stop_latitude\": -37.9484253,\r\n  \"stop_longitude\": 145.04187\r\n}, {\r\n  \"stop_suburb\": \"Malvern\",\r\n  \"stop_name\": \"Tooronga Station\",\r\n  \"stop_latitude\": -37.84937,\r\n  \"stop_longitude\": 145.041733\r\n}, {\r\n  \"stop_suburb\": \"Ormond\",\r\n  \"stop_name\": \"Ormond Station\",\r\n  \"stop_latitude\": -37.90321,\r\n  \"stop_longitude\": 145.039612\r\n}, {\r\n  \"stop_suburb\": \"Ivanhoe\",\r\n  \"stop_name\": \"Darebin Station\",\r\n  \"stop_latitude\": -37.7749634,\r\n  \"stop_longitude\": 145.038483\r\n}, {\r\n  \"stop_suburb\": \"Mckinnon\",\r\n  \"stop_name\": \"McKinnon Station\",\r\n  \"stop_latitude\": -37.910305,\r\n  \"stop_longitude\": 145.0383\r\n}, {\r\n  \"stop_suburb\": \"Bentleigh\",\r\n  \"stop_name\": \"Bentleigh Station\",\r\n  \"stop_latitude\": -37.9174271,\r\n  \"stop_longitude\": 145.036987\r\n}, {\r\n  \"stop_suburb\": \"Moorabbin\",\r\n  \"stop_name\": \"Moorabbin Station\",\r\n  \"stop_latitude\": -37.93435,\r\n  \"stop_longitude\": 145.036743\r\n}, {\r\n  \"stop_suburb\": \"Hawthorn\",\r\n  \"stop_name\": \"Glenferrie Station\",\r\n  \"stop_latitude\": -37.8214645,\r\n  \"stop_longitude\": 145.036438\r\n}, {\r\n  \"stop_suburb\": \"Bentleigh\",\r\n  \"stop_name\": \"Patterson Station\",\r\n  \"stop_latitude\": -37.9251442,\r\n  \"stop_longitude\": 145.035461\r\n}, {\r\n  \"stop_suburb\": \"Kooyong\",\r\n  \"stop_name\": \"Kooyong Station\",\r\n  \"stop_latitude\": -37.8399277,\r\n  \"stop_longitude\": 145.033554\r\n}, {\r\n  \"stop_suburb\": \"Alphington\",\r\n  \"stop_name\": \"Alphington Station\",\r\n  \"stop_latitude\": -37.7783966,\r\n  \"stop_longitude\": 145.03125\r\n}, {\r\n  \"stop_suburb\": \"Epping\",\r\n  \"stop_name\": \"Epping Station\",\r\n  \"stop_latitude\": -37.6521873,\r\n  \"stop_longitude\": 145.031067\r\n}, {\r\n  \"stop_suburb\": \"Malvern\",\r\n  \"stop_name\": \"Malvern Station\",\r\n  \"stop_latitude\": -37.86625,\r\n  \"stop_longitude\": 145.0293\r\n}, {\r\n  \"stop_suburb\": \"Hawthorn\",\r\n  \"stop_name\": \"Hawthorn Station\",\r\n  \"stop_latitude\": -37.8218231,\r\n  \"stop_longitude\": 145.0229\r\n}, {\r\n  \"stop_suburb\": \"Toorak\",\r\n  \"stop_name\": \"Heyington Station\",\r\n  \"stop_latitude\": -37.83467,\r\n  \"stop_longitude\": 145.022629\r\n}, {\r\n  \"stop_suburb\": \"Armadale\",\r\n  \"stop_name\": \"Armadale Station\",\r\n  \"stop_latitude\": -37.8564529,\r\n  \"stop_longitude\": 145.019333\r\n}, {\r\n  \"stop_suburb\": \"Lalor\",\r\n  \"stop_name\": \"Lalor Station\",\r\n  \"stop_latitude\": -37.66585,\r\n  \"stop_longitude\": 145.0172\r\n}, {\r\n  \"stop_suburb\": \"Fairfield\",\r\n  \"stop_name\": \"Fairfield Station\",\r\n  \"stop_latitude\": -37.7791748,\r\n  \"stop_longitude\": 145.0169\r\n}, {\r\n  \"stop_suburb\": \"Thomastown\",\r\n  \"stop_name\": \"Thomastown Station\",\r\n  \"stop_latitude\": -37.680336,\r\n  \"stop_longitude\": 145.014282\r\n}, {\r\n  \"stop_suburb\": \"Armadale\",\r\n  \"stop_name\": \"Toorak Station\",\r\n  \"stop_latitude\": -37.85077,\r\n  \"stop_longitude\": 145.0139\r\n}, {\r\n  \"stop_suburb\": \"Thomastown\",\r\n  \"stop_name\": \"Keon Park Station\",\r\n  \"stop_latitude\": -37.6948662,\r\n  \"stop_longitude\": 145.011887\r\n}, {\r\n  \"stop_suburb\": \"Reservoir\",\r\n  \"stop_name\": \"Ruthven Station\",\r\n  \"stop_latitude\": -37.7078972,\r\n  \"stop_longitude\": 145.009521\r\n}, {\r\n  \"stop_suburb\": \"Northcote\",\r\n  \"stop_name\": \"Dennis Station\",\r\n  \"stop_latitude\": -37.7791824,\r\n  \"stop_longitude\": 145.00824\r\n}, {\r\n  \"stop_suburb\": \"Burnley\",\r\n  \"stop_name\": \"Burnley Station\",\r\n  \"stop_latitude\": -37.8275566,\r\n  \"stop_longitude\": 145.007553\r\n}, {\r\n  \"stop_suburb\": \"Reservoir\",\r\n  \"stop_name\": \"Reservoir Station\",\r\n  \"stop_latitude\": -37.71689,\r\n  \"stop_longitude\": 145.006989\r\n}, {\r\n  \"stop_suburb\": \"Sandringham\",\r\n  \"stop_name\": \"Sandringham Station\",\r\n  \"stop_latitude\": -37.95033,\r\n  \"stop_longitude\": 145.004562\r\n}, {\r\n  \"stop_suburb\": \"Brighton\",\r\n  \"stop_name\": \"Gardenvale Station\",\r\n  \"stop_latitude\": -37.8966942,\r\n  \"stop_longitude\": 145.004166\r\n}, {\r\n  \"stop_suburb\": \"Reservoir\",\r\n  \"stop_name\": \"Regent Station\",\r\n  \"stop_latitude\": -37.7284,\r\n  \"stop_longitude\": 145.002777\r\n}, {\r\n  \"stop_suburb\": \"Brighton\",\r\n  \"stop_name\": \"North Brighton Station\",\r\n  \"stop_latitude\": -37.9048843,\r\n  \"stop_longitude\": 145.002609\r\n}, {\r\n  \"stop_suburb\": \"South Yarra\",\r\n  \"stop_name\": \"Hawksburn Station\",\r\n  \"stop_latitude\": -37.844593,\r\n  \"stop_longitude\": 145.002136\r\n}, {\r\n  \"stop_suburb\": \"Hampton\",\r\n  \"stop_name\": \"Hampton Station\",\r\n  \"stop_latitude\": -37.937973,\r\n  \"stop_longitude\": 145.001465\r\n}, {\r\n  \"stop_suburb\": \"Elsternwick\",\r\n  \"stop_name\": \"Elsternwick Station\",\r\n  \"stop_latitude\": -37.88475,\r\n  \"stop_longitude\": 145.0009\r\n}, {\r\n  \"stop_suburb\": \"Preston\",\r\n  \"stop_name\": \"Preston Station\",\r\n  \"stop_latitude\": -37.7386742,\r\n  \"stop_longitude\": 145.000534\r\n}, {\r\n  \"stop_suburb\": \"Preston\",\r\n  \"stop_name\": \"Bell Station\",\r\n  \"stop_latitude\": -37.7455673,\r\n  \"stop_longitude\": 145.000153\r\n}, {\r\n  \"stop_suburb\": \"Northcote\",\r\n  \"stop_name\": \"Westgarth Station\",\r\n  \"stop_latitude\": -37.7806168,\r\n  \"stop_longitude\": 144.999237\r\n}, {\r\n  \"stop_suburb\": \"Thornbury\",\r\n  \"stop_name\": \"Thornbury Station\",\r\n  \"stop_latitude\": -37.7550468,\r\n  \"stop_longitude\": 144.998581\r\n}, {\r\n  \"stop_suburb\": \"Richmond\",\r\n  \"stop_name\": \"East Richmond Station\",\r\n  \"stop_latitude\": -37.8264046,\r\n  \"stop_longitude\": 144.99707\r\n}, {\r\n  \"stop_suburb\": \"Northcote\",\r\n  \"stop_name\": \"Croxton Station\",\r\n  \"stop_latitude\": -37.7641,\r\n  \"stop_longitude\": 144.997055\r\n}, {\r\n  \"stop_suburb\": \"Brighton\",\r\n  \"stop_name\": \"Middle Brighton Station\",\r\n  \"stop_latitude\": -37.9151344,\r\n  \"stop_longitude\": 144.996292\r\n}, {\r\n  \"stop_suburb\": \"Clifton Hill\",\r\n  \"stop_name\": \"Clifton Hill Station\",\r\n  \"stop_latitude\": -37.7886543,\r\n  \"stop_longitude\": 144.995422\r\n}, {\r\n  \"stop_suburb\": \"Northcote\",\r\n  \"stop_name\": \"Northcote Station\",\r\n  \"stop_latitude\": -37.7698631,\r\n  \"stop_longitude\": 144.995285\r\n}, {\r\n  \"stop_suburb\": \"Ripponlea\",\r\n  \"stop_name\": \"Ripponlea Station\",\r\n  \"stop_latitude\": -37.8759079,\r\n  \"stop_longitude\": 144.995239\r\n}, {\r\n  \"stop_suburb\": \"Abbotsford\",\r\n  \"stop_name\": \"Victoria Park Station\",\r\n  \"stop_latitude\": -37.7991562,\r\n  \"stop_longitude\": 144.994446\r\n}, {\r\n  \"stop_suburb\": \"Abbotsford\",\r\n  \"stop_name\": \"Collingwood Station\",\r\n  \"stop_latitude\": -37.8045235,\r\n  \"stop_longitude\": 144.993744\r\n}, {\r\n  \"stop_suburb\": \"Balaclava\",\r\n  \"stop_name\": \"Balaclava Station\",\r\n  \"stop_latitude\": -37.8694878,\r\n  \"stop_longitude\": 144.993515\r\n}, {\r\n  \"stop_suburb\": \"Northcote\",\r\n  \"stop_name\": \"Merri Station\",\r\n  \"stop_latitude\": -37.7778435,\r\n  \"stop_longitude\": 144.992981\r\n}, {\r\n  \"stop_suburb\": \"Richmond\",\r\n  \"stop_name\": \"North Richmond Station\",\r\n  \"stop_latitude\": -37.8103943,\r\n  \"stop_longitude\": 144.9925\r\n}, {\r\n  \"stop_suburb\": \"Fitzroy North\",\r\n  \"stop_name\": \"Rushall Station\",\r\n  \"stop_latitude\": -37.78322,\r\n  \"stop_longitude\": 144.9924\r\n}, {\r\n  \"stop_suburb\": \"South Yarra\",\r\n  \"stop_name\": \"South Yarra Station\",\r\n  \"stop_latitude\": -37.8384438,\r\n  \"stop_longitude\": 144.99234\r\n}, {\r\n  \"stop_suburb\": \"Windsor\",\r\n  \"stop_name\": \"Windsor Station\",\r\n  \"stop_latitude\": -37.8560524,\r\n  \"stop_longitude\": 144.992035\r\n}, {\r\n  \"stop_suburb\": \"Richmond\",\r\n  \"stop_name\": \"West Richmond Station\",\r\n  \"stop_latitude\": -37.8149452,\r\n  \"stop_longitude\": 144.991425\r\n}, {\r\n  \"stop_suburb\": \"Richmond\",\r\n  \"stop_name\": \"Richmond Station\",\r\n  \"stop_latitude\": -37.8240738,\r\n  \"stop_longitude\": 144.990158\r\n}, {\r\n  \"stop_suburb\": \"Prahran\",\r\n  \"stop_name\": \"Prahran Station\",\r\n  \"stop_latitude\": -37.8495178,\r\n  \"stop_longitude\": 144.989853\r\n}, {\r\n  \"stop_suburb\": \"Brighton\",\r\n  \"stop_name\": \"Brighton Beach Station\",\r\n  \"stop_latitude\": -37.9264832,\r\n  \"stop_longitude\": 144.989151\r\n}, {\r\n  \"stop_suburb\": \"East Melbourne\",\r\n  \"stop_name\": \"Jolimont-MCG Station\",\r\n  \"stop_latitude\": -37.81653,\r\n  \"stop_longitude\": 144.9841\r\n}, {\r\n  \"stop_suburb\": \"Melbourne City\",\r\n  \"stop_name\": \"Parliament Station\",\r\n  \"stop_latitude\": -37.8110542,\r\n  \"stop_longitude\": 144.9729\r\n}, {\r\n  \"stop_suburb\": \"Melbourne City\",\r\n  \"stop_name\": \"Flinders Street Station\",\r\n  \"stop_latitude\": -37.81831,\r\n  \"stop_longitude\": 144.966965\r\n}, {\r\n  \"stop_suburb\": \"Coburg\",\r\n  \"stop_name\": \"Coburg Station\",\r\n  \"stop_latitude\": -37.74234,\r\n  \"stop_longitude\": 144.963348\r\n}, {\r\n  \"stop_suburb\": \"Coburg North\",\r\n  \"stop_name\": \"Batman Station\",\r\n  \"stop_latitude\": -37.7335243,\r\n  \"stop_longitude\": 144.96283\r\n}, {\r\n  \"stop_suburb\": \"Melbourne City\",\r\n  \"stop_name\": \"Melbourne Central Station\",\r\n  \"stop_latitude\": -37.8099365,\r\n  \"stop_longitude\": 144.9626\r\n}, {\r\n  \"stop_suburb\": \"Coburg\",\r\n  \"stop_name\": \"Moreland Station\",\r\n  \"stop_latitude\": -37.7544823,\r\n  \"stop_longitude\": 144.961823\r\n}, {\r\n  \"stop_suburb\": \"Coburg North\",\r\n  \"stop_name\": \"Merlynston Station\",\r\n  \"stop_latitude\": -37.7209358,\r\n  \"stop_longitude\": 144.961319\r\n}, {\r\n  \"stop_suburb\": \"Brunswick\",\r\n  \"stop_name\": \"Anstey Station\",\r\n  \"stop_latitude\": -37.76124,\r\n  \"stop_longitude\": 144.9607\r\n}, {\r\n  \"stop_suburb\": \"Fawkner\",\r\n  \"stop_name\": \"Fawkner Station\",\r\n  \"stop_latitude\": -37.7146225,\r\n  \"stop_longitude\": 144.960556\r\n}, {\r\n  \"stop_suburb\": \"Brunswick\",\r\n  \"stop_name\": \"Brunswick Station\",\r\n  \"stop_latitude\": -37.76772,\r\n  \"stop_longitude\": 144.9596\r\n}, {\r\n  \"stop_suburb\": \"Glenroy\",\r\n  \"stop_name\": \"Gowrie Station\",\r\n  \"stop_latitude\": -37.700676,\r\n  \"stop_longitude\": 144.958878\r\n}, {\r\n  \"stop_suburb\": \"Brunswick\",\r\n  \"stop_name\": \"Jewell Station\",\r\n  \"stop_latitude\": -37.7749825,\r\n  \"stop_longitude\": 144.95871\r\n}, {\r\n  \"stop_suburb\": \"Melbourne City\",\r\n  \"stop_name\": \"Flagstaff Station\",\r\n  \"stop_latitude\": -37.8119774,\r\n  \"stop_longitude\": 144.955658\r\n}, {\r\n  \"stop_suburb\": \"Melbourne City\",\r\n  \"stop_name\": \"Southern Cross Station\",\r\n  \"stop_latitude\": -37.8183327,\r\n  \"stop_longitude\": 144.95253\r\n}, {\r\n  \"stop_suburb\": \"Parkville\",\r\n  \"stop_name\": \"Royal Park Station\",\r\n  \"stop_latitude\": -37.7811928,\r\n  \"stop_longitude\": 144.9523\r\n}, {\r\n  \"stop_suburb\": \"Coolaroo\",\r\n  \"stop_name\": \"Upfield Station\",\r\n  \"stop_latitude\": -37.6660767,\r\n  \"stop_longitude\": 144.946747\r\n}, {\r\n  \"stop_suburb\": \"Craigieburn\",\r\n  \"stop_name\": \"Craigieburn Station\",\r\n  \"stop_latitude\": -37.6019249,\r\n  \"stop_longitude\": 144.943314\r\n}, {\r\n  \"stop_suburb\": \"West Melbourne\",\r\n  \"stop_name\": \"North Melbourne Station\",\r\n  \"stop_latitude\": -37.80631,\r\n  \"stop_longitude\": 144.941513\r\n}, {\r\n  \"stop_suburb\": \"North Melbourne\",\r\n  \"stop_name\": \"Flemington Bridge Station\",\r\n  \"stop_latitude\": -37.7881355,\r\n  \"stop_longitude\": 144.939316\r\n}, {\r\n  \"stop_suburb\": \"North Melbourne\",\r\n  \"stop_name\": \"Macaulay Station\",\r\n  \"stop_latitude\": -37.7942619,\r\n  \"stop_longitude\": 144.936172\r\n}, {\r\n  \"stop_suburb\": \"Roxburgh Park\",\r\n  \"stop_name\": \"Roxburgh Park Station\",\r\n  \"stop_latitude\": -37.6382332,\r\n  \"stop_longitude\": 144.93541\r\n}, {\r\n  \"stop_suburb\": \"Kensington\",\r\n  \"stop_name\": \"Kensington Station\",\r\n  \"stop_latitude\": -37.7937775,\r\n  \"stop_longitude\": 144.930527\r\n}, {\r\n  \"stop_suburb\": \"Flemington\",\r\n  \"stop_name\": \"Newmarket Station\",\r\n  \"stop_latitude\": -37.7873268,\r\n  \"stop_longitude\": 144.928986\r\n}, {\r\n  \"stop_suburb\": \"Pascoe Vale\",\r\n  \"stop_name\": \"Pascoe Vale Station\",\r\n  \"stop_latitude\": -37.7307549,\r\n  \"stop_longitude\": 144.928192\r\n}, {\r\n  \"stop_suburb\": \"Strathmore\",\r\n  \"stop_name\": \"Strathmore Station\",\r\n  \"stop_latitude\": -37.74359,\r\n  \"stop_longitude\": 144.927322\r\n}, {\r\n  \"stop_suburb\": \"Coolaroo\",\r\n  \"stop_name\": \"Coolaroo Station\",\r\n  \"stop_latitude\": -37.661,\r\n  \"stop_longitude\": 144.926056\r\n}, {\r\n  \"stop_suburb\": \"Kensington\",\r\n  \"stop_name\": \"South Kensington Station\",\r\n  \"stop_latitude\": -37.7995338,\r\n  \"stop_longitude\": 144.925476\r\n}, {\r\n  \"stop_suburb\": \"Ascot Vale\",\r\n  \"stop_name\": \"Ascot Vale Station\",\r\n  \"stop_latitude\": -37.77531,\r\n  \"stop_longitude\": 144.921829\r\n}, {\r\n  \"stop_suburb\": \"Oak Park\",\r\n  \"stop_name\": \"Oak Park Station\",\r\n  \"stop_latitude\": -37.71795,\r\n  \"stop_longitude\": 144.921509\r\n}, {\r\n  \"stop_suburb\": \"Essendon\",\r\n  \"stop_name\": \"Glenbervie Station\",\r\n  \"stop_latitude\": -37.7472153,\r\n  \"stop_longitude\": 144.920944\r\n}, {\r\n  \"stop_suburb\": \"Broadmeadows\",\r\n  \"stop_name\": \"Broadmeadows Station\",\r\n  \"stop_latitude\": -37.6830521,\r\n  \"stop_longitude\": 144.919617\r\n}, {\r\n  \"stop_suburb\": \"Moonee Ponds\",\r\n  \"stop_name\": \"Moonee Ponds Station\",\r\n  \"stop_latitude\": -37.7657051,\r\n  \"stop_longitude\": 144.919159\r\n}, {\r\n  \"stop_suburb\": \"Glenroy\",\r\n  \"stop_name\": \"Glenroy Station\",\r\n  \"stop_latitude\": -37.7045326,\r\n  \"stop_longitude\": 144.917221\r\n}, {\r\n  \"stop_suburb\": \"Essendon\",\r\n  \"stop_name\": \"Essendon Station\",\r\n  \"stop_latitude\": -37.75601,\r\n  \"stop_longitude\": 144.9162\r\n}, {\r\n  \"stop_suburb\": \"Glenroy\",\r\n  \"stop_name\": \"Jacana Station\",\r\n  \"stop_latitude\": -37.6951332,\r\n  \"stop_longitude\": 144.915848\r\n}, {\r\n  \"stop_suburb\": \"Flemington\",\r\n  \"stop_name\": \"Flemington Racecourse Station\",\r\n  \"stop_latitude\": -37.7871971,\r\n  \"stop_longitude\": 144.9076\r\n}, {\r\n  \"stop_suburb\": \"Williamstown\",\r\n  \"stop_name\": \"Williamstown Station\",\r\n  \"stop_latitude\": -37.8677559,\r\n  \"stop_longitude\": 144.905319\r\n}, {\r\n  \"stop_suburb\": \"Footscray\",\r\n  \"stop_name\": \"Footscray Station\",\r\n  \"stop_latitude\": -37.8010864,\r\n  \"stop_longitude\": 144.9032\r\n}, {\r\n  \"stop_suburb\": \"Seddon\",\r\n  \"stop_name\": \"Seddon Station\",\r\n  \"stop_latitude\": -37.8090019,\r\n  \"stop_longitude\": 144.89566\r\n}, {\r\n  \"stop_suburb\": \"Williamstown\",\r\n  \"stop_name\": \"Williamstown Beach Station\",\r\n  \"stop_latitude\": -37.8639832,\r\n  \"stop_longitude\": 144.894485\r\n}, {\r\n  \"stop_suburb\": \"Footscray\",\r\n  \"stop_name\": \"Middle Footscray Station\",\r\n  \"stop_latitude\": -37.8025,\r\n  \"stop_longitude\": 144.891479\r\n}, {\r\n  \"stop_suburb\": \"Yarraville\",\r\n  \"stop_name\": \"Yarraville Station\",\r\n  \"stop_latitude\": -37.81585,\r\n  \"stop_longitude\": 144.889938\r\n}, {\r\n  \"stop_suburb\": \"Williamstown\",\r\n  \"stop_name\": \"North Williamstown Station\",\r\n  \"stop_latitude\": -37.85733,\r\n  \"stop_longitude\": 144.889069\r\n}, {\r\n  \"stop_suburb\": \"Spotswood\",\r\n  \"stop_name\": \"Spotswood Station\",\r\n  \"stop_latitude\": -37.8306351,\r\n  \"stop_longitude\": 144.885941\r\n}, {\r\n  \"stop_suburb\": \"West Footscray\",\r\n  \"stop_name\": \"West Footscray Station\",\r\n  \"stop_latitude\": -37.8018036,\r\n  \"stop_longitude\": 144.883987\r\n}, {\r\n  \"stop_suburb\": \"Newport\",\r\n  \"stop_name\": \"Newport Station\",\r\n  \"stop_latitude\": -37.8427124,\r\n  \"stop_longitude\": 144.8836\r\n}, {\r\n  \"stop_suburb\": \"West Footscray\",\r\n  \"stop_name\": \"Tottenham Station\",\r\n  \"stop_latitude\": -37.7992554,\r\n  \"stop_longitude\": 144.862946\r\n}, {\r\n  \"stop_suburb\": \"Seaholme\",\r\n  \"stop_name\": \"Seaholme Station\",\r\n  \"stop_latitude\": -37.8678436,\r\n  \"stop_longitude\": 144.840958\r\n}, {\r\n  \"stop_suburb\": \"Sunshine\",\r\n  \"stop_name\": \"Sunshine Station\",\r\n  \"stop_latitude\": -37.7877426,\r\n  \"stop_longitude\": 144.83197\r\n}, {\r\n  \"stop_suburb\": \"Altona\",\r\n  \"stop_name\": \"Altona Station\",\r\n  \"stop_latitude\": -37.86715,\r\n  \"stop_longitude\": 144.829651\r\n}, {\r\n  \"stop_suburb\": \"Sunshine North\",\r\n  \"stop_name\": \"Albion Station\",\r\n  \"stop_latitude\": -37.7776566,\r\n  \"stop_longitude\": 144.8247\r\n}, {\r\n  \"stop_suburb\": \"Altona\",\r\n  \"stop_name\": \"Westona Station\",\r\n  \"stop_latitude\": -37.8651657,\r\n  \"stop_longitude\": 144.813492\r\n}, {\r\n  \"stop_suburb\": \"St Albans\",\r\n  \"stop_name\": \"Ginifer Station\",\r\n  \"stop_latitude\": -37.760067,\r\n  \"stop_longitude\": 144.811356\r\n}, {\r\n  \"stop_suburb\": \"St Albans\",\r\n  \"stop_name\": \"St Albans Station\",\r\n  \"stop_latitude\": -37.7448578,\r\n  \"stop_longitude\": 144.800049\r\n}, {\r\n  \"stop_suburb\": \"St Albans\",\r\n  \"stop_name\": \"Keilor Plains Station\",\r\n  \"stop_latitude\": -37.7292747,\r\n  \"stop_longitude\": 144.793732\r\n}, {\r\n  \"stop_suburb\": \"Sydenham\",\r\n  \"stop_name\": \"Watergardens Station\",\r\n  \"stop_latitude\": -37.7011261,\r\n  \"stop_longitude\": 144.774185\r\n}, {\r\n  \"stop_suburb\": \"Laverton\",\r\n  \"stop_name\": \"Laverton Station\",\r\n  \"stop_latitude\": -37.8636932,\r\n  \"stop_longitude\": 144.772614\r\n}, {\r\n  \"stop_suburb\": \"Laverton\",\r\n  \"stop_name\": \"Aircraft Station\",\r\n  \"stop_latitude\": -37.8666039,\r\n  \"stop_longitude\": 144.7608\r\n}, {\r\n  \"stop_suburb\": \"Williams Landing\",\r\n  \"stop_name\": \"Williams Landing Station\",\r\n  \"stop_latitude\": -37.86987,\r\n  \"stop_longitude\": 144.747452\r\n}, {\r\n  \"stop_suburb\": \"Sunbury\",\r\n  \"stop_name\": \"Sunbury Station\",\r\n  \"stop_latitude\": -37.57909,\r\n  \"stop_longitude\": 144.727325\r\n}, {\r\n  \"stop_suburb\": \"Diggers Rest\",\r\n  \"stop_name\": \"Diggers Rest Station\",\r\n  \"stop_latitude\": -37.6270142,\r\n  \"stop_longitude\": 144.719925\r\n}, {\r\n  \"stop_suburb\": \"Hoppers Crossing\",\r\n  \"stop_name\": \"Hoppers Crossing Station\",\r\n  \"stop_latitude\": -37.8832779,\r\n  \"stop_longitude\": 144.700958\r\n}, {\r\n  \"stop_suburb\": \"Werribee\",\r\n  \"stop_name\": \"Werribee Station\",\r\n  \"stop_latitude\": -37.8993835,\r\n  \"stop_longitude\": 144.661118\r\n}];\r\n\r\nexport default stops;","import stops from '../data/stopsLatLon';\r\n\r\n//Source: https://stackoverflow.com/q/18883601\r\nfunction getDistanceFromLatLonInKm(lat1,lon1,lat2,lon2) {\r\n    var R = 6371; // Radius of the earth in km\r\n    var dLat = deg2rad(lat2-lat1);  // deg2rad below\r\n    var dLon = deg2rad(lon2-lon1);\r\n    var a =\r\n      Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n      Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *\r\n      Math.sin(dLon/2) * Math.sin(dLon/2)\r\n      ;\r\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n    var d = R * c; // Distance in km\r\n    return d;\r\n  }\r\n\r\nfunction deg2rad(deg) {\r\n    return deg * (Math.PI/180)\r\n}\r\n\r\nfunction findClosestStops(lat, lon) {\r\n  let nearbyStops = [];\r\n  const offset = 0.02;\r\n  for (const stop of stops) {\r\n    const lonDiff = stop.stop_longitude - lon;\r\n    const latDiff = stop.stop_latitude - lat;\r\n\r\n    if (lonDiff > -offset && lonDiff < offset\r\n      && latDiff > -offset && latDiff < offset) {\r\n      nearbyStops.push(stop);\r\n    }\r\n  }\r\n\r\n  const results = nearbyStops.map(x => {\r\n      return {\r\n        stop_name: x.stop_name,\r\n        distance: getDistanceFromLatLonInKm(lat, lon, x.stop_latitude, x.stop_longitude),\r\n        latitude: x.stop_latitude,\r\n        longitude: x.stop_longitude\r\n      }\r\n    })\r\n    .sort((a, b) => a.distance - b.distance);\r\n\r\n  return results;\r\n}\r\n\r\nexport default findClosestStops;","import { AuctionSchedule, InspectionSchedule } from \"../types/domain\";\r\nimport { daysAsMinutes, getDateTimeString } from \"./dateTimeHelper\";\r\n\r\nexport const getRandomListedDate = (): string => {\r\n    return getDateTimeString(\r\n        getRandomDate(new Date(), daysAsMinutes(-5), 0) // Up to 5 days in the past\r\n    );\r\n}\r\n\r\nexport const getRandomInspectionAndAuctionSchedules = () : {\r\n    inspectionSchedule: InspectionSchedule | undefined,\r\n    auctionSchedule: AuctionSchedule | undefined\r\n} => {\r\n    const rand = randomInt(1, 4);\r\n    // 1 no inspections or auction, 2 inspect only, 3 inspect and auction, 4 auction only\r\n    const hasInspectionSchedule = rand  > 1 && rand < 4;\r\n    const hasAuctionSchedule = rand > 2;\r\n\r\n    const inspectionSchedule = hasInspectionSchedule ? getInspectionSchedule() : undefined;\r\n    const lastInspectionTime = hasInspectionSchedule && inspectionSchedule?.times && inspectionSchedule.times.length > 0\r\n        ? inspectionSchedule.times[inspectionSchedule.times.length - 1].closingTime\r\n        : undefined;\r\n\r\n    const auctionSchedule = hasAuctionSchedule\r\n        ? lastInspectionTime\r\n            // get auction time after last inspection time\r\n            ? getAuctionSchedule(new Date(lastInspectionTime))\r\n            : getAuctionSchedule()\r\n        : undefined;\r\n\r\n    return {\r\n        inspectionSchedule: inspectionSchedule,\r\n        auctionSchedule: auctionSchedule\r\n    }\r\n}\r\n\r\nconst getInspectionSchedule = () : InspectionSchedule => {\r\n    // get 1-3 inspection times\r\n    const inspectionCount = randomInt(1, 3);\r\n\r\n    const inspectionSchedule: InspectionSchedule = {\r\n        byAppointment: false,\r\n        recurring: false,\r\n        times: []\r\n    };\r\n\r\n    let baseDate = new Date();\r\n    for (let i = 0; i < inspectionCount; i++) {\r\n        // get random date for opening date\r\n        const openingDate = getRandomDateAndTime(baseDate, 0, daysAsMinutes(7));\r\n\r\n        // create copy for closing and add 30 minutes\r\n        const closingDate = new Date(openingDate);\r\n        closingDate.setMinutes(closingDate.getMinutes() + 30);\r\n\r\n        // convert both to strings and push on to times array\r\n        inspectionSchedule.times.push({\r\n            openingTime: getDateTimeString(openingDate),\r\n            closingTime: getDateTimeString(closingDate)\r\n        })\r\n\r\n        // set base date for next loop\r\n        baseDate = closingDate;\r\n    }\r\n\r\n    return inspectionSchedule;\r\n}\r\n\r\nconst getAuctionSchedule = (baseDate?: Date) : AuctionSchedule => {\r\n    const date = baseDate\r\n        ? getRandomDateAndTime(baseDate, 0, daysAsMinutes(7)) // Up to 7 days from the base date\r\n        : getRandomDateAndTime(new Date(), 0, daysAsMinutes(28)) // Up to 28 days from now\r\n\r\n    return  {\r\n        time: getDateTimeString(date), // 2022-03-18T19:46:23\r\n        auctionLocation: \"\"\r\n    }\r\n}\r\n\r\nconst setRandomTime = (date: Date) : Date => {\r\n    const rand = randomInt(1, 3);\r\n\r\n    switch (rand) {\r\n        case 1:\r\n            date.setHours(10);\r\n            date.setMinutes(0);\r\n            break;\r\n        case 2:\r\n            date.setHours(12);\r\n            date.setMinutes(15);\r\n            break;\r\n        case 3:\r\n            date.setHours(14);\r\n            date.setMinutes(30);\r\n            break;\r\n        default:\r\n            date.setHours(9);\r\n            date.setMinutes(0);\r\n    }\r\n\r\n    return date;\r\n}\r\n\r\nconst getRandomDateAndTime = (baseDate: Date, minMinuteOffset: number, maxMinuteOffset: number) => {\r\n    return setRandomTime(getRandomDate(baseDate, minMinuteOffset, maxMinuteOffset));\r\n}\r\n\r\nconst getRandomDate = (baseDate: Date, minMinuteOffset: number, maxMinuteOffset: number): Date => {\r\n    const date = new Date(baseDate);\r\n    const randomMinutes = randomInt(minMinuteOffset, maxMinuteOffset);\r\n    date.setMinutes(date.getMinutes() + randomMinutes);\r\n\r\n    return date;\r\n}\r\n\r\nconst randomInt = (min, max) => { // min and max included\r\n    return Math.floor(Math.random() * (max - min + 1) + min)\r\n}","import React from 'react';\nimport './App.scss';\nimport Search from './components/search';\nimport Footer from './components/footer';\nimport axios from 'axios';\nimport SearchResult from './components/searchResult';\nimport findClosestStops from './utils/distance'\nimport { isArchivedInStorage, loadSearchParamsFromLocalStorage, saveSearchParamsToLocalStorage } from './utils/localStorageHelper';\nimport DomainListingWrapper from './types/domain';\nimport { getRandomInspectionAndAuctionSchedules, getRandomListedDate } from './utils/staticDataHelper';\n\n//https://css-tricks.com/snippets/javascript/get-url-variables/\nconst getQueryVariable = function(variable) {\n    var query = window.location.search.substring(1);\n    var vars = query.split(\"&\");\n    for (var i=0;i<vars.length;i++) {\n        var pair = vars[i].split(\"=\");\n        if(pair[0] === variable){return pair[1];}\n    }\n    return false;\n};\n\ninterface DomainListingWrapperWithClosestStops extends DomainListingWrapper {\n    closestStops: Array<ClosestStop>;\n}\n\ninterface ClosestStop {\n    stop_name: string;\n    distance: number;\n    latitude: number;\n    longitude: number;\n}\n\nfunction App() {\n  const suburbsFromQueryString = getQueryVariable('suburbs');\n  const savedSearchParams = loadSearchParamsFromLocalStorage() ?? {};\n\n  const [selectedState, setSelectedState] = React.useState(savedSearchParams.state ?? 'VIC');\n  const defaultSuburbs = savedSearchParams.suburbCsv ?? (suburbsFromQueryString ? decodeURI((suburbsFromQueryString)) : '');\n  const [suburbs, setSuburbs] = React.useState(defaultSuburbs);\n  const [minBeds, setMinBeds] = React.useState(savedSearchParams.minBeds ?? 2);\n  const [minBaths, setMinBaths] = React.useState(savedSearchParams.minBaths ?? 1);\n  const [minCarSpaces, setMinCarSpaces] = React.useState(savedSearchParams.minCarSpaces ?? 1);\n  const [maxPrice, setMaxPrice] = React.useState(savedSearchParams.maxPrice ?? 650000);\n  const [maxDistanceFromTrain, setMaxDistanceFromTrain] = React.useState(savedSearchParams.maxDistFromTrain ?? 1.25);\n\n  const [results, setResults] = React.useState(new Array<DomainListingWrapperWithClosestStops>());\n  const [searchResultList, setSearchResultList] = React.useState(new Array<JSX.Element>());\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [showArchived, setShowArchived] = React.useState(false);\n  const [requestedSuburbs, setRequestedSuburbs] = React.useState('');\n  const [suburbCountsString, setSuburbCountsString] = React.useState('');\n  const [resultsCount, setResultsCount] = React.useState(0);\n\n  const setStateFromChangeEvent = function(evt, setFunc) {\n      setFunc(evt.currentTarget.value);\n  }\n\n  const setResultsWithClosestStops = function(r: DomainListingWrapper[]) {\n    const resultsWithClosestStops: DomainListingWrapperWithClosestStops[] = r\n        .filter(x => {\n            return x?.listing?.propertyDetails\n                && x.listing.propertyDetails.latitude\n                && x.listing.propertyDetails.longitude;\n        })\n        .map(x => {\n            const closestStops: ClosestStop[] = findClosestStops(x.listing.propertyDetails.latitude, x.listing.propertyDetails.longitude);\n            return { ...x, closestStops: closestStops };\n        })\n        .filter(x => {\n            return x.closestStops.length > 0\n                && Math.round(x.closestStops[0].distance * 10) / 10 <= maxDistanceFromTrain;\n        });\n    setResults(resultsWithClosestStops);\n  }\n\n  const apiKey = getQueryVariable('api_key');\n\n  const runSearch = async function() {\n    const reqSuburbs = suburbs\n        .split(',')\n        .map(x => x.trim())\n        .sort()\n        .join(', ');\n    setRequestedSuburbs(reqSuburbs);\n    saveSearchParamsToLocalStorage(\n        minBeds,\n        minBaths,\n        minCarSpaces,\n        maxPrice,\n        maxDistanceFromTrain,\n        reqSuburbs,\n        selectedState\n    );\n\n    const url = 'https://api.domain.com.au/v1/listings/residential/_search?api_key=' + apiKey;\n    const suburbArray = suburbs.split(',').map((s) => {\n        return {\n              \"state\":selectedState,\n              \"suburb\":s.trim()\n            };\n    });\n\n    const data = {\n      \"listingType\":\"Sale\",\n      \"propertyTypes\":[\n        \"House\",\n        \"NewApartments\",\n        \"ApartmentUnitFlat\",\n        \"Townhouse\"\n      ],\n      \"listingAttributes\": [\n        \"NotUnderContract\"\n      ],\n      \"minBedrooms\":minBeds,\n      \"minBathrooms\":minBaths,\n      \"minCarspaces\":minCarSpaces,\n      \"maxPrice\":maxPrice,\n      \"locations\":suburbArray,\n      \"sort\": {\n        \"sortKey\": \"DateListed\",\n        \"direction\": \"Descending\"\n      },\n      \"pageSize\": 200\n    };\n\n    if (apiKey) {\n        setIsLoading(true);\n        await axios.post(url, data)\n            .then(x => {\n                setIsLoading(false);\n                // TODO - Detect if the selected state has any stops\n                if (selectedState === 'VIC') {\n                    setResultsWithClosestStops(x.data);\n                } else {\n                    const closestStops: ClosestStop[] = [];\n                    setResults(x.data.map(y => { return { ...y, closestStops: closestStops } }));\n                }\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.error(err);\n            });\n    } else {\n        setIsLoading(true);\n        await axios.get('https://scottabutler.github.io/domain-react-spa/static-data.json')\n            .then(x => {\n                setIsLoading(false);\n                var updatedData = postProcessSampleData(x.data);\n                setResultsWithClosestStops(updatedData);\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.error(err);\n            });\n    }\n  }\n\n  const postProcessSampleData = (data: DomainListingWrapper[]): DomainListingWrapper[] => {\n      return data.map(x => {\n          // Set random listed date\n          x.listing.dateListed = getRandomListedDate();\n\n          // Set random auction and inspection schedules\n          const { inspectionSchedule, auctionSchedule } = getRandomInspectionAndAuctionSchedules();\n          x.listing.auctionSchedule = auctionSchedule;\n          x.listing.inspectionSchedule = inspectionSchedule\n\n          return x;\n      }).sort((a, b) => new Date(b.listing.dateListed).getTime() - new Date(a.listing.dateListed).getTime());\n  }\n\n  const spinner = isLoading\n    ? (\n        <div className=\"spinner-border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n        </div>\n    )\n    : <></>\n\n  React.useEffect(() => {\n    if (apiKey) return;\n    runSearch();\n  }, [])\n\n  React.useEffect(() => {\n    const list = results && results.length > 0\n        ? results.map(x =>\n            <SearchResult\n                key={x.listing.listingSlug}\n                closestStops={x.closestStops}\n                data={x}\n                showArchived={showArchived}\n            />)\n        : [];\n    setSearchResultList(list);\n\n    const suburbCounts = {};\n    let hiddenResultCount = 0;\n    results.map(x => {\n        if (x?.listing?.propertyDetails) {\n            const upperCaseSuburb = x.listing.propertyDetails.suburb.toUpperCase();\n            if (suburbCounts[upperCaseSuburb]) {\n                suburbCounts[upperCaseSuburb]++;\n            } else {\n                suburbCounts[upperCaseSuburb] = 1;\n            }\n\n            if (isArchivedInStorage(x.listing.listingSlug)) {\n                hiddenResultCount += 1; // TODO convert this to a map for immutability?\n                suburbCounts[upperCaseSuburb]--;\n            }\n        }\n    });\n    setResultsCount(showArchived ? list.length : list.length - hiddenResultCount);\n    const orderedSuburbCounts = orderObjectPropertiesByCount(suburbCounts);\n    let counts: string[] = [];\n    for (const s in orderedSuburbCounts) {\n        counts.push(`${toTitleCase(s)} (${orderedSuburbCounts[s]})`);\n    }\n\n    // Add in any that suburbs from the search that didn't have any search results\n    const requestedSuburbsArray = requestedSuburbs.split(', ').filter(r => !!r);\n    const keys = Object.keys(orderedSuburbCounts);\n    for (const r of requestedSuburbsArray) {\n        if (!keys.find(x => x === r.toUpperCase())) {\n            counts.push(`${toTitleCase(r)} (0)`);\n        }\n    }\n    setSuburbCountsString(counts.join(', '));\n  }, [results, showArchived]);\n\n  function toTitleCase(input) {\n    return input.split(' ')\n        .map(w => w[0].toUpperCase() + w.substr(1).toLowerCase())\n        .join(' ');\n  }\n\n  function orderObjectPropertiesByCount(obj) {\n    const keys = Object.keys(obj);\n    const sorted = keys.sort(function(a,b){return obj[b]-obj[a]});\n    const result = {};\n    for (const k in sorted) {\n        const sortedKey = sorted[k];\n        result[sortedKey] = obj[sortedKey];\n    };\n    return result;\n  }\n\n  return (\n    <div className=\"App py-2 container-fluid\">\n      {!apiKey &&\n        <div className=\"alert alert-info\" role=\"alert\">\n            <strong>Demo mode</strong> - Sample data will be returned unless a Domain Property API key is supplied using the <code>api_key</code> query string parameter.\n        </div>\n      }\n      <h3 className=\"py-2 bg-light\">Domain Property Search</h3>\n\n      <div className=\"row mt-3\">\n          <div className=\"col-12 mb-2 pb-2 pb-sm-0\">\n              <div className=\"border border-secondary rounded bg-white p-2\">\n                  <Search\n                      state={selectedState} updateState={(evt) => setStateFromChangeEvent(evt, setSelectedState)}\n                      suburbs={suburbs} updateSuburbs={(evt) => setStateFromChangeEvent(evt, setSuburbs)}\n                      minBeds={minBeds} updateMinBeds={(val) => setMinBeds(val)}\n                      minBaths={minBaths} updateMinBaths={(val) => setMinBaths(val)}\n                      minCarSpaces={minCarSpaces} updateMinCarSpaces={(val) => setMinCarSpaces(val)}\n                      maxPrice={maxPrice} updateMaxPrice={(val) => setMaxPrice(val)}\n                      maxDistanceFromTrain={maxDistanceFromTrain} updateMaxDistanceFromTrain={(val) => setMaxDistanceFromTrain(val)}\n                      runSearch={runSearch}\n                  />\n              </div>\n          </div>\n      </div>\n      <div className=\"row\" id=\"searchResultsContainer\">\n        <div className=\"col-12\">\n          <div className=\"border border-secondary rounded bg-white py-2 px-3\" id=\"output\">\n            {isLoading\n            ? spinner\n            : <>\n                {results && results.length > 0 && requestedSuburbs\n                ?\n                    <div className=\"row\">\n                        <div className=\"col\">\n                            <span>Showing {resultsCount} properties in {suburbCountsString}</span>\n                        </div>\n                        <div className=\"col-12\">\n                            <input id=\"showArchivedCheckbox\" type=\"checkbox\" defaultChecked={showArchived} onChange={() => { setShowArchived(!showArchived) }} />\n                            <label htmlFor=\"showArchivedCheckbox\">Show hidden properties</label>\n                        </div>\n                    </div>\n                : <></>\n                }\n                <div className={`d-flex flex-wrap ${searchResultList.length > 0 ? 'justify-content-around justify-content-md-start' : ''}`}>{\n                    searchResultList.length > 0\n                        ? searchResultList\n                        : <span className=\"d-block\">No properties found.</span>\n                }</div>\n            </>\n            }\n          </div>\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}